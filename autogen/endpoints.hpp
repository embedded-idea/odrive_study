/*
 * ============================ WARNING ============================
 * ==== This is an autogenerated file.                          ====
 * ==== Any changes to this file will be lost when recompiling. ====
 * =================================================================
 *
 * This file contains the toplevel handler for Fibre v0.1 endpoint operations.
 *
 * This endpoint-oriented approach will be deprecated in Fibre v0.2 in favor of
 * a function-oriented approach and a more powerful object model.
 *
 */
#ifndef __FIBRE_ENDPOINTS_HPP
#define __FIBRE_ENDPOINTS_HPP

#include <fibre/introspection.hpp>
#include <fibre/../../legacy_protocol.hpp>
#include <fibre/../../crc.hpp>

// Note: with -Og the functions with large switch statements reserves a huge amount
// of stack space because they reserves separate space for the stack frame of each
// of the inlined functions.
// The minimum known set of flags to prevent this is `-O1 -fipa-sra`.
// `-O2`, `-O3` and `-Os` are supersets of this.

#pragma GCC push_options
#pragma GCC optimize ("s")

namespace fibre {

const unsigned char embedded_json[] = "["
"{\"name\":\"\",\"id\":0,\"type\":\"json\",\"access\":\"r\"},"
"{\"name\":\"error\",\"id\":1,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"vbus_voltage\",\"id\":2,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"ibus\",\"id\":3,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"ibus_report_filter_k\",\"id\":4,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"serial_number\",\"id\":5,\"type\":\"uint64\",\"access\":\"r\"},"
"{\"name\":\"hw_version_major\",\"id\":6,\"type\":\"uint8\",\"access\":\"r\"},"
"{\"name\":\"hw_version_minor\",\"id\":7,\"type\":\"uint8\",\"access\":\"r\"},"
"{\"name\":\"hw_version_variant\",\"id\":8,\"type\":\"uint8\",\"access\":\"r\"},"
"{\"name\":\"fw_version_major\",\"id\":9,\"type\":\"uint8\",\"access\":\"r\"},"
"{\"name\":\"fw_version_minor\",\"id\":10,\"type\":\"uint8\",\"access\":\"r\"},"
"{\"name\":\"fw_version_revision\",\"id\":11,\"type\":\"uint8\",\"access\":\"r\"},"
"{\"name\":\"fw_version_unreleased\",\"id\":12,\"type\":\"uint8\",\"access\":\"r\"},"
"{\"name\":\"brake_resistor_armed\",\"id\":13,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"brake_resistor_saturated\",\"id\":14,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"brake_resistor_current\",\"id\":15,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"n_evt_sampling\",\"id\":16,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"n_evt_control_loop\",\"id\":17,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"task_timers_armed\",\"id\":18,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"task_times\",\"type\":\"object\",\"members\":["
"{\"name\":\"sampling\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":19,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":20,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":21,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":22,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"control_loop_misc\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":23,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":24,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":25,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":26,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"control_loop_checks\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":27,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":28,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":29,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":30,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"dc_calib_wait\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":31,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":32,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":33,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":34,\"type\":\"uint32\",\"access\":\"rw\"}]}]},"
"{\"name\":\"system_stats\",\"type\":\"object\",\"members\":["
"{\"name\":\"uptime\",\"id\":35,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"min_heap_space\",\"id\":36,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_stack_usage_axis\",\"id\":37,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_stack_usage_usb\",\"id\":38,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_stack_usage_uart\",\"id\":39,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_stack_usage_can\",\"id\":40,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_stack_usage_startup\",\"id\":41,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_stack_usage_analog\",\"id\":42,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"stack_size_axis\",\"id\":43,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"stack_size_usb\",\"id\":44,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"stack_size_uart\",\"id\":45,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"stack_size_startup\",\"id\":46,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"stack_size_can\",\"id\":47,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"stack_size_analog\",\"id\":48,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"prio_axis\",\"id\":49,\"type\":\"int32\",\"access\":\"r\"},"
"{\"name\":\"prio_usb\",\"id\":50,\"type\":\"int32\",\"access\":\"r\"},"
"{\"name\":\"prio_uart\",\"id\":51,\"type\":\"int32\",\"access\":\"r\"},"
"{\"name\":\"prio_startup\",\"id\":52,\"type\":\"int32\",\"access\":\"r\"},"
"{\"name\":\"prio_can\",\"id\":53,\"type\":\"int32\",\"access\":\"r\"},"
"{\"name\":\"prio_analog\",\"id\":54,\"type\":\"int32\",\"access\":\"r\"},"
"{\"name\":\"usb\",\"type\":\"object\",\"members\":["
"{\"name\":\"rx_cnt\",\"id\":55,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"tx_cnt\",\"id\":56,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"tx_overrun_cnt\",\"id\":57,\"type\":\"uint32\",\"access\":\"r\"}]},"
"{\"name\":\"i2c\",\"type\":\"object\",\"members\":["
"{\"name\":\"addr\",\"id\":58,\"type\":\"uint8\",\"access\":\"r\"},"
"{\"name\":\"addr_match_cnt\",\"id\":59,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"rx_cnt\",\"id\":60,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"error_cnt\",\"id\":61,\"type\":\"uint32\",\"access\":\"r\"}]}]},"
"{\"name\":\"user_config_loaded\",\"id\":62,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"misconfigured\",\"id\":63,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"oscilloscope\",\"type\":\"object\",\"members\":["
"{\"name\":\"size\",\"id\":64,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"get_val\",\"id\":65,\"type\":\"function\",\"inputs\":["
"{\"name\":\"index\",\"id\":66,\"type\":\"uint32\",\"access\":\"rw\"}],\"outputs\":["
"{\"name\":\"val\",\"id\":67,\"type\":\"float\",\"access\":\"r\"}]}]},"
"{\"name\":\"can\",\"type\":\"object\",\"members\":["
"{\"name\":\"error\",\"id\":68,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"baud_rate\",\"id\":69,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"protocol\",\"id\":70,\"type\":\"uint8\",\"access\":\"rw\"}]}]},"
"{\"name\":\"test_property\",\"id\":71,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"otp_valid\",\"id\":72,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"enable_uart_a\",\"id\":73,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"enable_uart_b\",\"id\":74,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"enable_uart_c\",\"id\":75,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"uart_a_baudrate\",\"id\":76,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"uart_b_baudrate\",\"id\":77,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"uart_c_baudrate\",\"id\":78,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"enable_can_a\",\"id\":79,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"enable_i2c_a\",\"id\":80,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"usb_cdc_protocol\",\"id\":81,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"uart0_protocol\",\"id\":82,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"uart1_protocol\",\"id\":83,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"uart2_protocol\",\"id\":84,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"max_regen_current\",\"id\":85,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"brake_resistance\",\"id\":86,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"enable_brake_resistor\",\"id\":87,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"dc_bus_undervoltage_trip_level\",\"id\":88,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"dc_bus_overvoltage_trip_level\",\"id\":89,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"enable_dc_bus_overvoltage_ramp\",\"id\":90,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"dc_bus_overvoltage_ramp_start\",\"id\":91,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"dc_bus_overvoltage_ramp_end\",\"id\":92,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"dc_max_positive_current\",\"id\":93,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"dc_max_negative_current\",\"id\":94,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"error_gpio_pin\",\"id\":95,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"gpio3_analog_mapping\",\"type\":\"object\",\"members\":["
"{\"name\":\"endpoint\",\"id\":96,\"type\":\"endpoint_ref\",\"access\":\"rw\"},"
"{\"name\":\"min\",\"id\":97,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"max\",\"id\":98,\"type\":\"float\",\"access\":\"rw\"}]},"
"{\"name\":\"gpio4_analog_mapping\",\"type\":\"object\",\"members\":["
"{\"name\":\"endpoint\",\"id\":99,\"type\":\"endpoint_ref\",\"access\":\"rw\"},"
"{\"name\":\"min\",\"id\":100,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"max\",\"id\":101,\"type\":\"float\",\"access\":\"rw\"}]},"
"{\"name\":\"gpio1_mode\",\"id\":102,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio2_mode\",\"id\":103,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio3_mode\",\"id\":104,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio4_mode\",\"id\":105,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio5_mode\",\"id\":106,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio6_mode\",\"id\":107,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio7_mode\",\"id\":108,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio8_mode\",\"id\":109,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio9_mode\",\"id\":110,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio10_mode\",\"id\":111,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio11_mode\",\"id\":112,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio12_mode\",\"id\":113,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio13_mode\",\"id\":114,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio14_mode\",\"id\":115,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio15_mode\",\"id\":116,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio16_mode\",\"id\":117,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"gpio1_pwm_mapping\",\"type\":\"object\",\"members\":["
"{\"name\":\"endpoint\",\"id\":118,\"type\":\"endpoint_ref\",\"access\":\"rw\"},"
"{\"name\":\"min\",\"id\":119,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"max\",\"id\":120,\"type\":\"float\",\"access\":\"rw\"}]},"
"{\"name\":\"gpio2_pwm_mapping\",\"type\":\"object\",\"members\":["
"{\"name\":\"endpoint\",\"id\":121,\"type\":\"endpoint_ref\",\"access\":\"rw\"},"
"{\"name\":\"min\",\"id\":122,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"max\",\"id\":123,\"type\":\"float\",\"access\":\"rw\"}]},"
"{\"name\":\"gpio3_pwm_mapping\",\"type\":\"object\",\"members\":["
"{\"name\":\"endpoint\",\"id\":124,\"type\":\"endpoint_ref\",\"access\":\"rw\"},"
"{\"name\":\"min\",\"id\":125,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"max\",\"id\":126,\"type\":\"float\",\"access\":\"rw\"}]},"
"{\"name\":\"gpio4_pwm_mapping\",\"type\":\"object\",\"members\":["
"{\"name\":\"endpoint\",\"id\":127,\"type\":\"endpoint_ref\",\"access\":\"rw\"},"
"{\"name\":\"min\",\"id\":128,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"max\",\"id\":129,\"type\":\"float\",\"access\":\"rw\"}]}]},"
"{\"name\":\"axis0\",\"type\":\"object\",\"members\":["
"{\"name\":\"error\",\"id\":130,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"step_dir_active\",\"id\":131,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"last_drv_fault\",\"id\":132,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"steps\",\"id\":133,\"type\":\"int64\",\"access\":\"r\"},"
"{\"name\":\"current_state\",\"id\":134,\"type\":\"uint8\",\"access\":\"r\"},"
"{\"name\":\"requested_state\",\"id\":135,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"is_homed\",\"id\":136,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"startup_motor_calibration\",\"id\":137,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"startup_encoder_index_search\",\"id\":138,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"startup_encoder_offset_calibration\",\"id\":139,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"startup_closed_loop_control\",\"id\":140,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"startup_homing\",\"id\":141,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"enable_step_dir\",\"id\":142,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"step_dir_always_on\",\"id\":143,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"enable_sensorless_mode\",\"id\":144,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"watchdog_timeout\",\"id\":145,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"enable_watchdog\",\"id\":146,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"step_gpio_pin\",\"id\":147,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"dir_gpio_pin\",\"id\":148,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"calibration_lockin\",\"type\":\"object\",\"members\":["
"{\"name\":\"current\",\"id\":149,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"ramp_time\",\"id\":150,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"ramp_distance\",\"id\":151,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"accel\",\"id\":152,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel\",\"id\":153,\"type\":\"float\",\"access\":\"rw\"}]},"
"{\"name\":\"sensorless_ramp\",\"type\":\"object\",\"members\":["
"{\"name\":\"current\",\"id\":154,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"ramp_time\",\"id\":155,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"ramp_distance\",\"id\":156,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"accel\",\"id\":157,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel\",\"id\":158,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"finish_distance\",\"id\":159,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"finish_on_vel\",\"id\":160,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"finish_on_distance\",\"id\":161,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"finish_on_enc_idx\",\"id\":162,\"type\":\"bool\",\"access\":\"rw\"}]},"
"{\"name\":\"general_lockin\",\"type\":\"object\",\"members\":["
"{\"name\":\"current\",\"id\":163,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"ramp_time\",\"id\":164,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"ramp_distance\",\"id\":165,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"accel\",\"id\":166,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel\",\"id\":167,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"finish_distance\",\"id\":168,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"finish_on_vel\",\"id\":169,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"finish_on_distance\",\"id\":170,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"finish_on_enc_idx\",\"id\":171,\"type\":\"bool\",\"access\":\"rw\"}]},"
"{\"name\":\"can\",\"type\":\"object\",\"members\":["
"{\"name\":\"node_id\",\"id\":172,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"is_extended\",\"id\":173,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"heartbeat_rate_ms\",\"id\":174,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"encoder_rate_ms\",\"id\":175,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"motor_error_rate_ms\",\"id\":176,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"encoder_error_rate_ms\",\"id\":177,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"controller_error_rate_ms\",\"id\":178,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"sensorless_error_rate_ms\",\"id\":179,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"encoder_count_rate_ms\",\"id\":180,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"iq_rate_ms\",\"id\":181,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"sensorless_rate_ms\",\"id\":182,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"bus_vi_rate_ms\",\"id\":183,\"type\":\"uint32\",\"access\":\"rw\"}]}]},"
"{\"name\":\"motor\",\"type\":\"object\",\"members\":["
"{\"name\":\"last_error_time\",\"id\":184,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"error\",\"id\":185,\"type\":\"uint64\",\"access\":\"rw\"},"
"{\"name\":\"is_armed\",\"id\":186,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"is_calibrated\",\"id\":187,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"current_meas_phA\",\"id\":188,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"current_meas_phB\",\"id\":189,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"current_meas_phC\",\"id\":190,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"DC_calib_phA\",\"id\":191,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"DC_calib_phB\",\"id\":192,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"DC_calib_phC\",\"id\":193,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"I_bus\",\"id\":194,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"phase_current_rev_gain\",\"id\":195,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"effective_current_lim\",\"id\":196,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"max_allowed_current\",\"id\":197,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"max_dc_calib\",\"id\":198,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"fet_thermistor\",\"type\":\"object\",\"members\":["
"{\"name\":\"temperature\",\"id\":199,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"temp_limit_lower\",\"id\":200,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"temp_limit_upper\",\"id\":201,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"enabled\",\"id\":202,\"type\":\"bool\",\"access\":\"rw\"}]}]},"
"{\"name\":\"motor_thermistor\",\"type\":\"object\",\"members\":["
"{\"name\":\"temperature\",\"id\":203,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"gpio_pin\",\"id\":204,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"poly_coefficient_0\",\"id\":205,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"poly_coefficient_1\",\"id\":206,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"poly_coefficient_2\",\"id\":207,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"poly_coefficient_3\",\"id\":208,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"temp_limit_lower\",\"id\":209,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"temp_limit_upper\",\"id\":210,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"enabled\",\"id\":211,\"type\":\"bool\",\"access\":\"rw\"}]}]},"
"{\"name\":\"current_control\",\"type\":\"object\",\"members\":["
"{\"name\":\"p_gain\",\"id\":212,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"i_gain\",\"id\":213,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"I_measured_report_filter_k\",\"id\":214,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"Id_setpoint\",\"id\":215,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"Iq_setpoint\",\"id\":216,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"Vd_setpoint\",\"id\":217,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"Vq_setpoint\",\"id\":218,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"phase\",\"id\":219,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"phase_vel\",\"id\":220,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"Ialpha_measured\",\"id\":221,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"Ibeta_measured\",\"id\":222,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"Id_measured\",\"id\":223,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"Iq_measured\",\"id\":224,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"power\",\"id\":225,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"v_current_control_integral_d\",\"id\":226,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"v_current_control_integral_q\",\"id\":227,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"final_v_alpha\",\"id\":228,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"final_v_beta\",\"id\":229,\"type\":\"float\",\"access\":\"r\"}]},"
"{\"name\":\"n_evt_current_measurement\",\"id\":230,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"n_evt_pwm_update\",\"id\":231,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"pre_calibrated\",\"id\":232,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"pole_pairs\",\"id\":233,\"type\":\"int32\",\"access\":\"rw\"},"
"{\"name\":\"calibration_current\",\"id\":234,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"resistance_calib_max_voltage\",\"id\":235,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"phase_inductance\",\"id\":236,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"phase_resistance\",\"id\":237,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"torque_constant\",\"id\":238,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"motor_type\",\"id\":239,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"current_lim\",\"id\":240,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"current_lim_margin\",\"id\":241,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"torque_lim\",\"id\":242,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"inverter_temp_limit_lower\",\"id\":243,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"inverter_temp_limit_upper\",\"id\":244,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"requested_current_range\",\"id\":245,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"current_control_bandwidth\",\"id\":246,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"acim_gain_min_flux\",\"id\":247,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"acim_autoflux_min_Id\",\"id\":248,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"acim_autoflux_enable\",\"id\":249,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"acim_autoflux_attack_gain\",\"id\":250,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"acim_autoflux_decay_gain\",\"id\":251,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"R_wL_FF_enable\",\"id\":252,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"bEMF_FF_enable\",\"id\":253,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"I_bus_hard_min\",\"id\":254,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"I_bus_hard_max\",\"id\":255,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"I_leak_max\",\"id\":256,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"dc_calib_tau\",\"id\":257,\"type\":\"float\",\"access\":\"rw\"}]}]},"
"{\"name\":\"controller\",\"type\":\"object\",\"members\":["
"{\"name\":\"error\",\"id\":258,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"last_error_time\",\"id\":259,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"input_pos\",\"id\":260,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"input_vel\",\"id\":261,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"input_torque\",\"id\":262,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"pos_setpoint\",\"id\":263,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"vel_setpoint\",\"id\":264,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"torque_setpoint\",\"id\":265,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"trajectory_done\",\"id\":266,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"vel_integrator_torque\",\"id\":267,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"anticogging_valid\",\"id\":268,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"autotuning_phase\",\"id\":269,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"gain_scheduling_width\",\"id\":270,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"enable_vel_limit\",\"id\":271,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"enable_torque_mode_vel_limit\",\"id\":272,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"enable_gain_scheduling\",\"id\":273,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"enable_overspeed_error\",\"id\":274,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"control_mode\",\"id\":275,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"input_mode\",\"id\":276,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"pos_gain\",\"id\":277,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel_gain\",\"id\":278,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel_integrator_gain\",\"id\":279,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel_integrator_limit\",\"id\":280,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel_limit\",\"id\":281,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel_limit_tolerance\",\"id\":282,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel_ramp_rate\",\"id\":283,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"torque_ramp_rate\",\"id\":284,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"circular_setpoints\",\"id\":285,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"circular_setpoint_range\",\"id\":286,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"steps_per_circular_range\",\"id\":287,\"type\":\"int32\",\"access\":\"rw\"},"
"{\"name\":\"homing_speed\",\"id\":288,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"inertia\",\"id\":289,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"axis_to_mirror\",\"id\":290,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"mirror_ratio\",\"id\":291,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"torque_mirror_ratio\",\"id\":292,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"load_encoder_axis\",\"id\":293,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"input_filter_bandwidth\",\"id\":294,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"anticogging\",\"type\":\"object\",\"members\":["
"{\"name\":\"index\",\"id\":295,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"pre_calibrated\",\"id\":296,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"calib_anticogging\",\"id\":297,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"calib_pos_threshold\",\"id\":298,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"calib_vel_threshold\",\"id\":299,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"cogging_ratio\",\"id\":300,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"anticogging_enabled\",\"id\":301,\"type\":\"bool\",\"access\":\"rw\"}]},"
"{\"name\":\"mechanical_power_bandwidth\",\"id\":302,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"electrical_power_bandwidth\",\"id\":303,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"spinout_mechanical_power_threshold\",\"id\":304,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"spinout_electrical_power_threshold\",\"id\":305,\"type\":\"float\",\"access\":\"rw\"}]},"
"{\"name\":\"autotuning\",\"type\":\"object\",\"members\":["
"{\"name\":\"frequency\",\"id\":306,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"pos_amplitude\",\"id\":307,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel_amplitude\",\"id\":308,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"torque_amplitude\",\"id\":309,\"type\":\"float\",\"access\":\"rw\"}]},"
"{\"name\":\"mechanical_power\",\"id\":310,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"electrical_power\",\"id\":311,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"move_incremental\",\"id\":312,\"type\":\"function\",\"inputs\":["
"{\"name\":\"displacement\",\"id\":313,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"from_input_pos\",\"id\":314,\"type\":\"bool\",\"access\":\"rw\"}],\"outputs\":[]},"
"{\"name\":\"start_anticogging_calibration\",\"id\":315,\"type\":\"function\",\"inputs\":[],\"outputs\":[]},"
"{\"name\":\"remove_anticogging_bias\",\"id\":316,\"type\":\"function\",\"inputs\":[],\"outputs\":["
"{\"name\":\"val\",\"id\":317,\"type\":\"float\",\"access\":\"r\"}]},"
"{\"name\":\"get_anticogging_value\",\"id\":318,\"type\":\"function\",\"inputs\":["
"{\"name\":\"index\",\"id\":319,\"type\":\"uint32\",\"access\":\"rw\"}],\"outputs\":["
"{\"name\":\"val\",\"id\":320,\"type\":\"float\",\"access\":\"r\"}]}]},"
"{\"name\":\"encoder\",\"type\":\"object\",\"members\":["
"{\"name\":\"error\",\"id\":321,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"is_ready\",\"id\":322,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"index_found\",\"id\":323,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"shadow_count\",\"id\":324,\"type\":\"int32\",\"access\":\"r\"},"
"{\"name\":\"count_in_cpr\",\"id\":325,\"type\":\"int32\",\"access\":\"r\"},"
"{\"name\":\"interpolation\",\"id\":326,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"phase\",\"id\":327,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"pos_estimate\",\"id\":328,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"pos_estimate_counts\",\"id\":329,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"pos_circular\",\"id\":330,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"pos_cpr_counts\",\"id\":331,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"delta_pos_cpr_counts\",\"id\":332,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"hall_state\",\"id\":333,\"type\":\"uint8\",\"access\":\"r\"},"
"{\"name\":\"vel_estimate\",\"id\":334,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"vel_estimate_counts\",\"id\":335,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"calib_scan_response\",\"id\":336,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"pos_abs\",\"id\":337,\"type\":\"int32\",\"access\":\"rw\"},"
"{\"name\":\"spi_error_rate\",\"id\":338,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"mode\",\"id\":339,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"use_index\",\"id\":340,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"index_offset\",\"id\":341,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"use_index_offset\",\"id\":342,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"find_idx_on_lockin_only\",\"id\":343,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"abs_spi_cs_gpio_pin\",\"id\":344,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"cpr\",\"id\":345,\"type\":\"int32\",\"access\":\"rw\"},"
"{\"name\":\"phase_offset\",\"id\":346,\"type\":\"int32\",\"access\":\"rw\"},"
"{\"name\":\"phase_offset_float\",\"id\":347,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"direction\",\"id\":348,\"type\":\"int32\",\"access\":\"rw\"},"
"{\"name\":\"pre_calibrated\",\"id\":349,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"enable_phase_interpolation\",\"id\":350,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"bandwidth\",\"id\":351,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"calib_range\",\"id\":352,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"calib_scan_distance\",\"id\":353,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"calib_scan_omega\",\"id\":354,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"ignore_illegal_hall_state\",\"id\":355,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"hall_polarity\",\"id\":356,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"hall_polarity_calibrated\",\"id\":357,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"sincos_gpio_pin_sin\",\"id\":358,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"sincos_gpio_pin_cos\",\"id\":359,\"type\":\"uint16\",\"access\":\"rw\"}]},"
"{\"name\":\"set_linear_count\",\"id\":360,\"type\":\"function\",\"inputs\":["
"{\"name\":\"count\",\"id\":361,\"type\":\"int32\",\"access\":\"rw\"}],\"outputs\":[]}]},"
"{\"name\":\"acim_estimator\",\"type\":\"object\",\"members\":["
"{\"name\":\"rotor_flux\",\"id\":362,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"slip_vel\",\"id\":363,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"phase_offset\",\"id\":364,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"stator_phase_vel\",\"id\":365,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"stator_phase\",\"id\":366,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"slip_velocity\",\"id\":367,\"type\":\"float\",\"access\":\"rw\"}]}]},"
"{\"name\":\"sensorless_estimator\",\"type\":\"object\",\"members\":["
"{\"name\":\"error\",\"id\":368,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"phase\",\"id\":369,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"pll_pos\",\"id\":370,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"phase_vel\",\"id\":371,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"vel_estimate\",\"id\":372,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"observer_gain\",\"id\":373,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"pll_bandwidth\",\"id\":374,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"pm_flux_linkage\",\"id\":375,\"type\":\"float\",\"access\":\"rw\"}]}]},"
"{\"name\":\"trap_traj\",\"type\":\"object\",\"members\":["
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"vel_limit\",\"id\":376,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"accel_limit\",\"id\":377,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"decel_limit\",\"id\":378,\"type\":\"float\",\"access\":\"rw\"}]}]},"
"{\"name\":\"min_endstop\",\"type\":\"object\",\"members\":["
"{\"name\":\"endstop_state\",\"id\":379,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"gpio_num\",\"id\":380,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"enabled\",\"id\":381,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"offset\",\"id\":382,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"is_active_high\",\"id\":383,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"debounce_ms\",\"id\":384,\"type\":\"uint32\",\"access\":\"rw\"}]}]},"
"{\"name\":\"max_endstop\",\"type\":\"object\",\"members\":["
"{\"name\":\"endstop_state\",\"id\":385,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"gpio_num\",\"id\":386,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"enabled\",\"id\":387,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"offset\",\"id\":388,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"is_active_high\",\"id\":389,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"debounce_ms\",\"id\":390,\"type\":\"uint32\",\"access\":\"rw\"}]}]},"
"{\"name\":\"mechanical_brake\",\"type\":\"object\",\"members\":["
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"gpio_num\",\"id\":391,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"is_active_low\",\"id\":392,\"type\":\"bool\",\"access\":\"rw\"}]},"
"{\"name\":\"engage\",\"id\":393,\"type\":\"function\",\"inputs\":[],\"outputs\":[]},"
"{\"name\":\"release\",\"id\":394,\"type\":\"function\",\"inputs\":[],\"outputs\":[]}]},"
"{\"name\":\"task_times\",\"type\":\"object\",\"members\":["
"{\"name\":\"thermistor_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":395,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":396,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":397,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":398,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"encoder_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":399,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":400,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":401,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":402,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"sensorless_estimator_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":403,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":404,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":405,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":406,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"endstop_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":407,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":408,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":409,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":410,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"can_heartbeat\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":411,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":412,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":413,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":414,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"controller_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":415,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":416,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":417,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":418,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"open_loop_controller_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":419,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":420,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":421,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":422,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"acim_estimator_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":423,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":424,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":425,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":426,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"motor_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":427,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":428,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":429,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":430,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"current_controller_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":431,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":432,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":433,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":434,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"dc_calib\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":435,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":436,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":437,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":438,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"current_sense\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":439,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":440,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":441,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":442,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"pwm_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":443,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":444,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":445,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":446,\"type\":\"uint32\",\"access\":\"rw\"}]}]},"
"{\"name\":\"watchdog_feed\",\"id\":447,\"type\":\"function\",\"inputs\":[],\"outputs\":[]}]},"
"{\"name\":\"axis1\",\"type\":\"object\",\"members\":["
"{\"name\":\"error\",\"id\":448,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"step_dir_active\",\"id\":449,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"last_drv_fault\",\"id\":450,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"steps\",\"id\":451,\"type\":\"int64\",\"access\":\"r\"},"
"{\"name\":\"current_state\",\"id\":452,\"type\":\"uint8\",\"access\":\"r\"},"
"{\"name\":\"requested_state\",\"id\":453,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"is_homed\",\"id\":454,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"startup_motor_calibration\",\"id\":455,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"startup_encoder_index_search\",\"id\":456,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"startup_encoder_offset_calibration\",\"id\":457,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"startup_closed_loop_control\",\"id\":458,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"startup_homing\",\"id\":459,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"enable_step_dir\",\"id\":460,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"step_dir_always_on\",\"id\":461,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"enable_sensorless_mode\",\"id\":462,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"watchdog_timeout\",\"id\":463,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"enable_watchdog\",\"id\":464,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"step_gpio_pin\",\"id\":465,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"dir_gpio_pin\",\"id\":466,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"calibration_lockin\",\"type\":\"object\",\"members\":["
"{\"name\":\"current\",\"id\":467,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"ramp_time\",\"id\":468,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"ramp_distance\",\"id\":469,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"accel\",\"id\":470,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel\",\"id\":471,\"type\":\"float\",\"access\":\"rw\"}]},"
"{\"name\":\"sensorless_ramp\",\"type\":\"object\",\"members\":["
"{\"name\":\"current\",\"id\":472,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"ramp_time\",\"id\":473,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"ramp_distance\",\"id\":474,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"accel\",\"id\":475,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel\",\"id\":476,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"finish_distance\",\"id\":477,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"finish_on_vel\",\"id\":478,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"finish_on_distance\",\"id\":479,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"finish_on_enc_idx\",\"id\":480,\"type\":\"bool\",\"access\":\"rw\"}]},"
"{\"name\":\"general_lockin\",\"type\":\"object\",\"members\":["
"{\"name\":\"current\",\"id\":481,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"ramp_time\",\"id\":482,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"ramp_distance\",\"id\":483,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"accel\",\"id\":484,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel\",\"id\":485,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"finish_distance\",\"id\":486,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"finish_on_vel\",\"id\":487,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"finish_on_distance\",\"id\":488,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"finish_on_enc_idx\",\"id\":489,\"type\":\"bool\",\"access\":\"rw\"}]},"
"{\"name\":\"can\",\"type\":\"object\",\"members\":["
"{\"name\":\"node_id\",\"id\":490,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"is_extended\",\"id\":491,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"heartbeat_rate_ms\",\"id\":492,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"encoder_rate_ms\",\"id\":493,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"motor_error_rate_ms\",\"id\":494,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"encoder_error_rate_ms\",\"id\":495,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"controller_error_rate_ms\",\"id\":496,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"sensorless_error_rate_ms\",\"id\":497,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"encoder_count_rate_ms\",\"id\":498,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"iq_rate_ms\",\"id\":499,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"sensorless_rate_ms\",\"id\":500,\"type\":\"uint32\",\"access\":\"rw\"},"
"{\"name\":\"bus_vi_rate_ms\",\"id\":501,\"type\":\"uint32\",\"access\":\"rw\"}]}]},"
"{\"name\":\"motor\",\"type\":\"object\",\"members\":["
"{\"name\":\"last_error_time\",\"id\":502,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"error\",\"id\":503,\"type\":\"uint64\",\"access\":\"rw\"},"
"{\"name\":\"is_armed\",\"id\":504,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"is_calibrated\",\"id\":505,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"current_meas_phA\",\"id\":506,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"current_meas_phB\",\"id\":507,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"current_meas_phC\",\"id\":508,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"DC_calib_phA\",\"id\":509,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"DC_calib_phB\",\"id\":510,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"DC_calib_phC\",\"id\":511,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"I_bus\",\"id\":512,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"phase_current_rev_gain\",\"id\":513,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"effective_current_lim\",\"id\":514,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"max_allowed_current\",\"id\":515,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"max_dc_calib\",\"id\":516,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"fet_thermistor\",\"type\":\"object\",\"members\":["
"{\"name\":\"temperature\",\"id\":517,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"temp_limit_lower\",\"id\":518,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"temp_limit_upper\",\"id\":519,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"enabled\",\"id\":520,\"type\":\"bool\",\"access\":\"rw\"}]}]},"
"{\"name\":\"motor_thermistor\",\"type\":\"object\",\"members\":["
"{\"name\":\"temperature\",\"id\":521,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"gpio_pin\",\"id\":522,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"poly_coefficient_0\",\"id\":523,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"poly_coefficient_1\",\"id\":524,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"poly_coefficient_2\",\"id\":525,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"poly_coefficient_3\",\"id\":526,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"temp_limit_lower\",\"id\":527,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"temp_limit_upper\",\"id\":528,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"enabled\",\"id\":529,\"type\":\"bool\",\"access\":\"rw\"}]}]},"
"{\"name\":\"current_control\",\"type\":\"object\",\"members\":["
"{\"name\":\"p_gain\",\"id\":530,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"i_gain\",\"id\":531,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"I_measured_report_filter_k\",\"id\":532,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"Id_setpoint\",\"id\":533,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"Iq_setpoint\",\"id\":534,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"Vd_setpoint\",\"id\":535,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"Vq_setpoint\",\"id\":536,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"phase\",\"id\":537,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"phase_vel\",\"id\":538,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"Ialpha_measured\",\"id\":539,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"Ibeta_measured\",\"id\":540,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"Id_measured\",\"id\":541,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"Iq_measured\",\"id\":542,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"power\",\"id\":543,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"v_current_control_integral_d\",\"id\":544,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"v_current_control_integral_q\",\"id\":545,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"final_v_alpha\",\"id\":546,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"final_v_beta\",\"id\":547,\"type\":\"float\",\"access\":\"r\"}]},"
"{\"name\":\"n_evt_current_measurement\",\"id\":548,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"n_evt_pwm_update\",\"id\":549,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"pre_calibrated\",\"id\":550,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"pole_pairs\",\"id\":551,\"type\":\"int32\",\"access\":\"rw\"},"
"{\"name\":\"calibration_current\",\"id\":552,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"resistance_calib_max_voltage\",\"id\":553,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"phase_inductance\",\"id\":554,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"phase_resistance\",\"id\":555,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"torque_constant\",\"id\":556,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"motor_type\",\"id\":557,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"current_lim\",\"id\":558,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"current_lim_margin\",\"id\":559,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"torque_lim\",\"id\":560,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"inverter_temp_limit_lower\",\"id\":561,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"inverter_temp_limit_upper\",\"id\":562,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"requested_current_range\",\"id\":563,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"current_control_bandwidth\",\"id\":564,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"acim_gain_min_flux\",\"id\":565,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"acim_autoflux_min_Id\",\"id\":566,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"acim_autoflux_enable\",\"id\":567,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"acim_autoflux_attack_gain\",\"id\":568,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"acim_autoflux_decay_gain\",\"id\":569,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"R_wL_FF_enable\",\"id\":570,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"bEMF_FF_enable\",\"id\":571,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"I_bus_hard_min\",\"id\":572,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"I_bus_hard_max\",\"id\":573,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"I_leak_max\",\"id\":574,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"dc_calib_tau\",\"id\":575,\"type\":\"float\",\"access\":\"rw\"}]}]},"
"{\"name\":\"controller\",\"type\":\"object\",\"members\":["
"{\"name\":\"error\",\"id\":576,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"last_error_time\",\"id\":577,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"input_pos\",\"id\":578,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"input_vel\",\"id\":579,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"input_torque\",\"id\":580,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"pos_setpoint\",\"id\":581,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"vel_setpoint\",\"id\":582,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"torque_setpoint\",\"id\":583,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"trajectory_done\",\"id\":584,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"vel_integrator_torque\",\"id\":585,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"anticogging_valid\",\"id\":586,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"autotuning_phase\",\"id\":587,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"gain_scheduling_width\",\"id\":588,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"enable_vel_limit\",\"id\":589,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"enable_torque_mode_vel_limit\",\"id\":590,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"enable_gain_scheduling\",\"id\":591,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"enable_overspeed_error\",\"id\":592,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"control_mode\",\"id\":593,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"input_mode\",\"id\":594,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"pos_gain\",\"id\":595,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel_gain\",\"id\":596,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel_integrator_gain\",\"id\":597,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel_integrator_limit\",\"id\":598,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel_limit\",\"id\":599,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel_limit_tolerance\",\"id\":600,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel_ramp_rate\",\"id\":601,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"torque_ramp_rate\",\"id\":602,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"circular_setpoints\",\"id\":603,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"circular_setpoint_range\",\"id\":604,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"steps_per_circular_range\",\"id\":605,\"type\":\"int32\",\"access\":\"rw\"},"
"{\"name\":\"homing_speed\",\"id\":606,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"inertia\",\"id\":607,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"axis_to_mirror\",\"id\":608,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"mirror_ratio\",\"id\":609,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"torque_mirror_ratio\",\"id\":610,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"load_encoder_axis\",\"id\":611,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"input_filter_bandwidth\",\"id\":612,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"anticogging\",\"type\":\"object\",\"members\":["
"{\"name\":\"index\",\"id\":613,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"pre_calibrated\",\"id\":614,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"calib_anticogging\",\"id\":615,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"calib_pos_threshold\",\"id\":616,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"calib_vel_threshold\",\"id\":617,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"cogging_ratio\",\"id\":618,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"anticogging_enabled\",\"id\":619,\"type\":\"bool\",\"access\":\"rw\"}]},"
"{\"name\":\"mechanical_power_bandwidth\",\"id\":620,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"electrical_power_bandwidth\",\"id\":621,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"spinout_mechanical_power_threshold\",\"id\":622,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"spinout_electrical_power_threshold\",\"id\":623,\"type\":\"float\",\"access\":\"rw\"}]},"
"{\"name\":\"autotuning\",\"type\":\"object\",\"members\":["
"{\"name\":\"frequency\",\"id\":624,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"pos_amplitude\",\"id\":625,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"vel_amplitude\",\"id\":626,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"torque_amplitude\",\"id\":627,\"type\":\"float\",\"access\":\"rw\"}]},"
"{\"name\":\"mechanical_power\",\"id\":628,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"electrical_power\",\"id\":629,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"move_incremental\",\"id\":630,\"type\":\"function\",\"inputs\":["
"{\"name\":\"displacement\",\"id\":631,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"from_input_pos\",\"id\":632,\"type\":\"bool\",\"access\":\"rw\"}],\"outputs\":[]},"
"{\"name\":\"start_anticogging_calibration\",\"id\":633,\"type\":\"function\",\"inputs\":[],\"outputs\":[]},"
"{\"name\":\"remove_anticogging_bias\",\"id\":634,\"type\":\"function\",\"inputs\":[],\"outputs\":["
"{\"name\":\"val\",\"id\":635,\"type\":\"float\",\"access\":\"r\"}]},"
"{\"name\":\"get_anticogging_value\",\"id\":636,\"type\":\"function\",\"inputs\":["
"{\"name\":\"index\",\"id\":637,\"type\":\"uint32\",\"access\":\"rw\"}],\"outputs\":["
"{\"name\":\"val\",\"id\":638,\"type\":\"float\",\"access\":\"r\"}]}]},"
"{\"name\":\"encoder\",\"type\":\"object\",\"members\":["
"{\"name\":\"error\",\"id\":639,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"is_ready\",\"id\":640,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"index_found\",\"id\":641,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"shadow_count\",\"id\":642,\"type\":\"int32\",\"access\":\"r\"},"
"{\"name\":\"count_in_cpr\",\"id\":643,\"type\":\"int32\",\"access\":\"r\"},"
"{\"name\":\"interpolation\",\"id\":644,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"phase\",\"id\":645,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"pos_estimate\",\"id\":646,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"pos_estimate_counts\",\"id\":647,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"pos_circular\",\"id\":648,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"pos_cpr_counts\",\"id\":649,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"delta_pos_cpr_counts\",\"id\":650,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"hall_state\",\"id\":651,\"type\":\"uint8\",\"access\":\"r\"},"
"{\"name\":\"vel_estimate\",\"id\":652,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"vel_estimate_counts\",\"id\":653,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"calib_scan_response\",\"id\":654,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"pos_abs\",\"id\":655,\"type\":\"int32\",\"access\":\"rw\"},"
"{\"name\":\"spi_error_rate\",\"id\":656,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"mode\",\"id\":657,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"use_index\",\"id\":658,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"index_offset\",\"id\":659,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"use_index_offset\",\"id\":660,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"find_idx_on_lockin_only\",\"id\":661,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"abs_spi_cs_gpio_pin\",\"id\":662,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"cpr\",\"id\":663,\"type\":\"int32\",\"access\":\"rw\"},"
"{\"name\":\"phase_offset\",\"id\":664,\"type\":\"int32\",\"access\":\"rw\"},"
"{\"name\":\"phase_offset_float\",\"id\":665,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"direction\",\"id\":666,\"type\":\"int32\",\"access\":\"rw\"},"
"{\"name\":\"pre_calibrated\",\"id\":667,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"enable_phase_interpolation\",\"id\":668,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"bandwidth\",\"id\":669,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"calib_range\",\"id\":670,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"calib_scan_distance\",\"id\":671,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"calib_scan_omega\",\"id\":672,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"ignore_illegal_hall_state\",\"id\":673,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"hall_polarity\",\"id\":674,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"hall_polarity_calibrated\",\"id\":675,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"sincos_gpio_pin_sin\",\"id\":676,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"sincos_gpio_pin_cos\",\"id\":677,\"type\":\"uint16\",\"access\":\"rw\"}]},"
"{\"name\":\"set_linear_count\",\"id\":678,\"type\":\"function\",\"inputs\":["
"{\"name\":\"count\",\"id\":679,\"type\":\"int32\",\"access\":\"rw\"}],\"outputs\":[]}]},"
"{\"name\":\"acim_estimator\",\"type\":\"object\",\"members\":["
"{\"name\":\"rotor_flux\",\"id\":680,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"slip_vel\",\"id\":681,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"phase_offset\",\"id\":682,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"stator_phase_vel\",\"id\":683,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"stator_phase\",\"id\":684,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"slip_velocity\",\"id\":685,\"type\":\"float\",\"access\":\"rw\"}]}]},"
"{\"name\":\"sensorless_estimator\",\"type\":\"object\",\"members\":["
"{\"name\":\"error\",\"id\":686,\"type\":\"uint8\",\"access\":\"rw\"},"
"{\"name\":\"phase\",\"id\":687,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"pll_pos\",\"id\":688,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"phase_vel\",\"id\":689,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"vel_estimate\",\"id\":690,\"type\":\"float\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"observer_gain\",\"id\":691,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"pll_bandwidth\",\"id\":692,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"pm_flux_linkage\",\"id\":693,\"type\":\"float\",\"access\":\"rw\"}]}]},"
"{\"name\":\"trap_traj\",\"type\":\"object\",\"members\":["
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"vel_limit\",\"id\":694,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"accel_limit\",\"id\":695,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"decel_limit\",\"id\":696,\"type\":\"float\",\"access\":\"rw\"}]}]},"
"{\"name\":\"min_endstop\",\"type\":\"object\",\"members\":["
"{\"name\":\"endstop_state\",\"id\":697,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"gpio_num\",\"id\":698,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"enabled\",\"id\":699,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"offset\",\"id\":700,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"is_active_high\",\"id\":701,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"debounce_ms\",\"id\":702,\"type\":\"uint32\",\"access\":\"rw\"}]}]},"
"{\"name\":\"max_endstop\",\"type\":\"object\",\"members\":["
"{\"name\":\"endstop_state\",\"id\":703,\"type\":\"bool\",\"access\":\"r\"},"
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"gpio_num\",\"id\":704,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"enabled\",\"id\":705,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"offset\",\"id\":706,\"type\":\"float\",\"access\":\"rw\"},"
"{\"name\":\"is_active_high\",\"id\":707,\"type\":\"bool\",\"access\":\"rw\"},"
"{\"name\":\"debounce_ms\",\"id\":708,\"type\":\"uint32\",\"access\":\"rw\"}]}]},"
"{\"name\":\"mechanical_brake\",\"type\":\"object\",\"members\":["
"{\"name\":\"config\",\"type\":\"object\",\"members\":["
"{\"name\":\"gpio_num\",\"id\":709,\"type\":\"uint16\",\"access\":\"rw\"},"
"{\"name\":\"is_active_low\",\"id\":710,\"type\":\"bool\",\"access\":\"rw\"}]},"
"{\"name\":\"engage\",\"id\":711,\"type\":\"function\",\"inputs\":[],\"outputs\":[]},"
"{\"name\":\"release\",\"id\":712,\"type\":\"function\",\"inputs\":[],\"outputs\":[]}]},"
"{\"name\":\"task_times\",\"type\":\"object\",\"members\":["
"{\"name\":\"thermistor_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":713,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":714,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":715,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":716,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"encoder_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":717,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":718,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":719,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":720,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"sensorless_estimator_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":721,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":722,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":723,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":724,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"endstop_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":725,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":726,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":727,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":728,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"can_heartbeat\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":729,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":730,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":731,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":732,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"controller_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":733,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":734,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":735,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":736,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"open_loop_controller_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":737,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":738,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":739,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":740,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"acim_estimator_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":741,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":742,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":743,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":744,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"motor_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":745,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":746,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":747,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":748,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"current_controller_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":749,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":750,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":751,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":752,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"dc_calib\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":753,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":754,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":755,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":756,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"current_sense\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":757,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":758,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":759,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":760,\"type\":\"uint32\",\"access\":\"rw\"}]},"
"{\"name\":\"pwm_update\",\"type\":\"object\",\"members\":["
"{\"name\":\"start_time\",\"id\":761,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"end_time\",\"id\":762,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"length\",\"id\":763,\"type\":\"uint32\",\"access\":\"r\"},"
"{\"name\":\"max_length\",\"id\":764,\"type\":\"uint32\",\"access\":\"rw\"}]}]},"
"{\"name\":\"watchdog_feed\",\"id\":765,\"type\":\"function\",\"inputs\":[],\"outputs\":[]}]},"
"{\"name\":\"test_function\",\"id\":766,\"type\":\"function\",\"inputs\":["
"{\"name\":\"delta\",\"id\":767,\"type\":\"int32\",\"access\":\"rw\"}],\"outputs\":["
"{\"name\":\"cnt\",\"id\":768,\"type\":\"int32\",\"access\":\"r\"}]},"
"{\"name\":\"get_adc_voltage\",\"id\":769,\"type\":\"function\",\"inputs\":["
"{\"name\":\"gpio\",\"id\":770,\"type\":\"uint32\",\"access\":\"rw\"}],\"outputs\":["
"{\"name\":\"voltage\",\"id\":771,\"type\":\"float\",\"access\":\"r\"}]},"
"{\"name\":\"save_configuration\",\"id\":772,\"type\":\"function\",\"inputs\":[],\"outputs\":["
"{\"name\":\"success\",\"id\":773,\"type\":\"bool\",\"access\":\"r\"}]},"
"{\"name\":\"erase_configuration\",\"id\":774,\"type\":\"function\",\"inputs\":[],\"outputs\":[]},"
"{\"name\":\"reboot\",\"id\":775,\"type\":\"function\",\"inputs\":[],\"outputs\":[]},"
"{\"name\":\"enter_dfu_mode\",\"id\":776,\"type\":\"function\",\"inputs\":[],\"outputs\":[]},"
"{\"name\":\"get_interrupt_status\",\"id\":777,\"type\":\"function\",\"inputs\":["
"{\"name\":\"irqn\",\"id\":778,\"type\":\"int32\",\"access\":\"rw\"}],\"outputs\":["
"{\"name\":\"status\",\"id\":779,\"type\":\"uint32\",\"access\":\"r\"}]},"
"{\"name\":\"get_dma_status\",\"id\":780,\"type\":\"function\",\"inputs\":["
"{\"name\":\"stream_num\",\"id\":781,\"type\":\"uint8\",\"access\":\"rw\"}],\"outputs\":["
"{\"name\":\"status\",\"id\":782,\"type\":\"uint32\",\"access\":\"r\"}]},"
"{\"name\":\"get_gpio_states\",\"id\":783,\"type\":\"function\",\"inputs\":[],\"outputs\":["
"{\"name\":\"status\",\"id\":784,\"type\":\"uint32\",\"access\":\"r\"}]},"
"{\"name\":\"get_drv_fault\",\"id\":785,\"type\":\"function\",\"inputs\":[],\"outputs\":["
"{\"name\":\"drv_fault\",\"id\":786,\"type\":\"uint64\",\"access\":\"r\"}]},"
"{\"name\":\"clear_errors\",\"id\":787,\"type\":\"function\",\"inputs\":[],\"outputs\":[]}]";
const size_t embedded_json_length = sizeof(embedded_json) - 1;
const uint16_t json_crc_ = calc_crc16<CANONICAL_CRC16_POLYNOMIAL>(PROTOCOL_VERSION, embedded_json, embedded_json_length);
const uint32_t json_version_id_ = (json_crc_ << 16) | calc_crc16<CANONICAL_CRC16_POLYNOMIAL>(json_crc_, embedded_json, embedded_json_length);

static void get_property(Introspectable& result, size_t idx) {
    switch (idx) {
        case 1: { ODrive3Intf::get_error(&ep_root, &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::Error>>::singleton; } break;
        case 4: { ODrive3Intf::get_ibus_report_filter_k(&ep_root, &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 18: { ODrive3Intf::get_task_timers_armed(&ep_root, &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 22: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::TaskTimesIntf::get_sampling(ODrive3Intf::get_task_times(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 26: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::TaskTimesIntf::get_control_loop_misc(ODrive3Intf::get_task_times(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 30: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::TaskTimesIntf::get_control_loop_checks(ODrive3Intf::get_task_times(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 34: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::TaskTimesIntf::get_dc_calib_wait(ODrive3Intf::get_task_times(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 66: { ODriveIntf::OscilloscopeIntf::get_get_val_in_index_(ODrive3Intf::get_oscilloscope(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 68: { ODriveIntf::CanIntf::get_error(ODrive3Intf::get_can(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::CanIntf::Error>>::singleton; } break;
        case 69: { ODriveIntf::CanIntf::ConfigIntf::get_baud_rate(ODriveIntf::CanIntf::get_config(ODrive3Intf::get_can(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 70: { ODriveIntf::CanIntf::ConfigIntf::get_protocol(ODriveIntf::CanIntf::get_config(ODrive3Intf::get_can(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::CanIntf::Protocol>>::singleton; } break;
        case 71: { ODrive3Intf::get_test_property(&ep_root, &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 73: { ODrive3Intf::ConfigIntf::get_enable_uart_a(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 74: { ODrive3Intf::ConfigIntf::get_enable_uart_b(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 75: { ODrive3Intf::ConfigIntf::get_enable_uart_c(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 76: { ODrive3Intf::ConfigIntf::get_uart_a_baudrate(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 77: { ODrive3Intf::ConfigIntf::get_uart_b_baudrate(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 78: { ODrive3Intf::ConfigIntf::get_uart_c_baudrate(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 79: { ODrive3Intf::ConfigIntf::get_enable_can_a(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 80: { ODrive3Intf::ConfigIntf::get_enable_i2c_a(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 81: { ODrive3Intf::ConfigIntf::get_usb_cdc_protocol(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::StreamProtocolType>>::singleton; } break;
        case 82: { ODrive3Intf::ConfigIntf::get_uart0_protocol(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::StreamProtocolType>>::singleton; } break;
        case 83: { ODrive3Intf::ConfigIntf::get_uart1_protocol(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::StreamProtocolType>>::singleton; } break;
        case 84: { ODrive3Intf::ConfigIntf::get_uart2_protocol(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::StreamProtocolType>>::singleton; } break;
        case 85: { ODrive3Intf::ConfigIntf::get_max_regen_current(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 86: { ODrive3Intf::ConfigIntf::get_brake_resistance(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 87: { ODrive3Intf::ConfigIntf::get_enable_brake_resistor(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 88: { ODrive3Intf::ConfigIntf::get_dc_bus_undervoltage_trip_level(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 89: { ODrive3Intf::ConfigIntf::get_dc_bus_overvoltage_trip_level(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 90: { ODrive3Intf::ConfigIntf::get_enable_dc_bus_overvoltage_ramp(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 91: { ODrive3Intf::ConfigIntf::get_dc_bus_overvoltage_ramp_start(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 92: { ODrive3Intf::ConfigIntf::get_dc_bus_overvoltage_ramp_end(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 93: { ODrive3Intf::ConfigIntf::get_dc_max_positive_current(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 94: { ODrive3Intf::ConfigIntf::get_dc_max_negative_current(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 95: { ODrive3Intf::ConfigIntf::get_error_gpio_pin(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 96: { ODriveIntf::EndpointIntf::get_endpoint(ODrive3Intf::ConfigIntf::get_gpio3_analog_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<endpoint_ref_t>>::singleton; } break;
        case 97: { ODriveIntf::EndpointIntf::get_min(ODrive3Intf::ConfigIntf::get_gpio3_analog_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 98: { ODriveIntf::EndpointIntf::get_max(ODrive3Intf::ConfigIntf::get_gpio3_analog_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 99: { ODriveIntf::EndpointIntf::get_endpoint(ODrive3Intf::ConfigIntf::get_gpio4_analog_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<endpoint_ref_t>>::singleton; } break;
        case 100: { ODriveIntf::EndpointIntf::get_min(ODrive3Intf::ConfigIntf::get_gpio4_analog_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 101: { ODriveIntf::EndpointIntf::get_max(ODrive3Intf::ConfigIntf::get_gpio4_analog_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 102: { ODrive3Intf::ConfigIntf::get_gpio1_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 103: { ODrive3Intf::ConfigIntf::get_gpio2_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 104: { ODrive3Intf::ConfigIntf::get_gpio3_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 105: { ODrive3Intf::ConfigIntf::get_gpio4_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 106: { ODrive3Intf::ConfigIntf::get_gpio5_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 107: { ODrive3Intf::ConfigIntf::get_gpio6_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 108: { ODrive3Intf::ConfigIntf::get_gpio7_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 109: { ODrive3Intf::ConfigIntf::get_gpio8_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 110: { ODrive3Intf::ConfigIntf::get_gpio9_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 111: { ODrive3Intf::ConfigIntf::get_gpio10_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 112: { ODrive3Intf::ConfigIntf::get_gpio11_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 113: { ODrive3Intf::ConfigIntf::get_gpio12_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 114: { ODrive3Intf::ConfigIntf::get_gpio13_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 115: { ODrive3Intf::ConfigIntf::get_gpio14_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 116: { ODrive3Intf::ConfigIntf::get_gpio15_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 117: { ODrive3Intf::ConfigIntf::get_gpio16_mode(ODrive3Intf::get_config(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::GpioMode>>::singleton; } break;
        case 118: { ODriveIntf::EndpointIntf::get_endpoint(ODrive3Intf::ConfigIntf::get_gpio1_pwm_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<endpoint_ref_t>>::singleton; } break;
        case 119: { ODriveIntf::EndpointIntf::get_min(ODrive3Intf::ConfigIntf::get_gpio1_pwm_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 120: { ODriveIntf::EndpointIntf::get_max(ODrive3Intf::ConfigIntf::get_gpio1_pwm_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 121: { ODriveIntf::EndpointIntf::get_endpoint(ODrive3Intf::ConfigIntf::get_gpio2_pwm_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<endpoint_ref_t>>::singleton; } break;
        case 122: { ODriveIntf::EndpointIntf::get_min(ODrive3Intf::ConfigIntf::get_gpio2_pwm_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 123: { ODriveIntf::EndpointIntf::get_max(ODrive3Intf::ConfigIntf::get_gpio2_pwm_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 124: { ODriveIntf::EndpointIntf::get_endpoint(ODrive3Intf::ConfigIntf::get_gpio3_pwm_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<endpoint_ref_t>>::singleton; } break;
        case 125: { ODriveIntf::EndpointIntf::get_min(ODrive3Intf::ConfigIntf::get_gpio3_pwm_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 126: { ODriveIntf::EndpointIntf::get_max(ODrive3Intf::ConfigIntf::get_gpio3_pwm_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 127: { ODriveIntf::EndpointIntf::get_endpoint(ODrive3Intf::ConfigIntf::get_gpio4_pwm_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<endpoint_ref_t>>::singleton; } break;
        case 128: { ODriveIntf::EndpointIntf::get_min(ODrive3Intf::ConfigIntf::get_gpio4_pwm_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 129: { ODriveIntf::EndpointIntf::get_max(ODrive3Intf::ConfigIntf::get_gpio4_pwm_mapping(ODrive3Intf::get_config(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 130: { ODriveIntf::AxisIntf::get_error(ODrive3Intf::get_axis0(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::AxisIntf::Error>>::singleton; } break;
        case 135: { ODriveIntf::AxisIntf::get_requested_state(ODrive3Intf::get_axis0(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::AxisIntf::AxisState>>::singleton; } break;
        case 136: { ODriveIntf::AxisIntf::get_is_homed(ODrive3Intf::get_axis0(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 137: { ODriveIntf::AxisIntf::ConfigIntf::get_startup_motor_calibration(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 138: { ODriveIntf::AxisIntf::ConfigIntf::get_startup_encoder_index_search(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 139: { ODriveIntf::AxisIntf::ConfigIntf::get_startup_encoder_offset_calibration(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 140: { ODriveIntf::AxisIntf::ConfigIntf::get_startup_closed_loop_control(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 141: { ODriveIntf::AxisIntf::ConfigIntf::get_startup_homing(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 142: { ODriveIntf::AxisIntf::ConfigIntf::get_enable_step_dir(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 143: { ODriveIntf::AxisIntf::ConfigIntf::get_step_dir_always_on(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 144: { ODriveIntf::AxisIntf::ConfigIntf::get_enable_sensorless_mode(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 145: { ODriveIntf::AxisIntf::ConfigIntf::get_watchdog_timeout(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 146: { ODriveIntf::AxisIntf::ConfigIntf::get_enable_watchdog(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 147: { ODriveIntf::AxisIntf::ConfigIntf::get_step_gpio_pin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 148: { ODriveIntf::AxisIntf::ConfigIntf::get_dir_gpio_pin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 149: { ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_current(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 150: { ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_ramp_time(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 151: { ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_ramp_distance(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 152: { ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_accel(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 153: { ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_vel(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 154: { ODriveIntf::AxisIntf::LockinConfigIntf::get_current(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 155: { ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_time(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 156: { ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_distance(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 157: { ODriveIntf::AxisIntf::LockinConfigIntf::get_accel(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 158: { ODriveIntf::AxisIntf::LockinConfigIntf::get_vel(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 159: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_distance(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 160: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_vel(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 161: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_distance(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 162: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_enc_idx(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 163: { ODriveIntf::AxisIntf::LockinConfigIntf::get_current(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 164: { ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_time(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 165: { ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_distance(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 166: { ODriveIntf::AxisIntf::LockinConfigIntf::get_accel(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 167: { ODriveIntf::AxisIntf::LockinConfigIntf::get_vel(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 168: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_distance(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 169: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_vel(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 170: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_distance(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 171: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_enc_idx(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 172: { ODriveIntf::AxisIntf::CanConfigIntf::get_node_id(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 173: { ODriveIntf::AxisIntf::CanConfigIntf::get_is_extended(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 174: { ODriveIntf::AxisIntf::CanConfigIntf::get_heartbeat_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 175: { ODriveIntf::AxisIntf::CanConfigIntf::get_encoder_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 176: { ODriveIntf::AxisIntf::CanConfigIntf::get_motor_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 177: { ODriveIntf::AxisIntf::CanConfigIntf::get_encoder_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 178: { ODriveIntf::AxisIntf::CanConfigIntf::get_controller_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 179: { ODriveIntf::AxisIntf::CanConfigIntf::get_sensorless_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 180: { ODriveIntf::AxisIntf::CanConfigIntf::get_encoder_count_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 181: { ODriveIntf::AxisIntf::CanConfigIntf::get_iq_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 182: { ODriveIntf::AxisIntf::CanConfigIntf::get_sensorless_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 183: { ODriveIntf::AxisIntf::CanConfigIntf::get_bus_vi_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 184: { ODriveIntf::MotorIntf::get_last_error_time(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 185: { ODriveIntf::MotorIntf::get_error(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::MotorIntf::Error>>::singleton; } break;
        case 191: { ODriveIntf::MotorIntf::get_DC_calib_phA(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 192: { ODriveIntf::MotorIntf::get_DC_calib_phB(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 193: { ODriveIntf::MotorIntf::get_DC_calib_phC(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 195: { ODriveIntf::MotorIntf::get_phase_current_rev_gain(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 200: { ODriveIntf::OnboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_lower(ODriveIntf::OnboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_fet_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 201: { ODriveIntf::OnboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_upper(ODriveIntf::OnboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_fet_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 202: { ODriveIntf::OnboardThermistorCurrentLimiterIntf::ConfigIntf::get_enabled(ODriveIntf::OnboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_fet_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 204: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_gpio_pin(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 205: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_0(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 206: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_1(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 207: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_2(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 208: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_3(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 209: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_lower(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 210: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_upper(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 211: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_enabled(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 214: { ODriveIntf::MotorIntf::CurrentControlIntf::get_I_measured_report_filter_k(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 226: { ODriveIntf::MotorIntf::CurrentControlIntf::get_v_current_control_integral_d(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 227: { ODriveIntf::MotorIntf::CurrentControlIntf::get_v_current_control_integral_q(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 232: { ODriveIntf::MotorIntf::ConfigIntf::get_pre_calibrated(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 233: { ODriveIntf::MotorIntf::ConfigIntf::get_pole_pairs(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 234: { ODriveIntf::MotorIntf::ConfigIntf::get_calibration_current(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 235: { ODriveIntf::MotorIntf::ConfigIntf::get_resistance_calib_max_voltage(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 236: { ODriveIntf::MotorIntf::ConfigIntf::get_phase_inductance(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 237: { ODriveIntf::MotorIntf::ConfigIntf::get_phase_resistance(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 238: { ODriveIntf::MotorIntf::ConfigIntf::get_torque_constant(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 239: { ODriveIntf::MotorIntf::ConfigIntf::get_motor_type(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::MotorIntf::MotorType>>::singleton; } break;
        case 240: { ODriveIntf::MotorIntf::ConfigIntf::get_current_lim(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 241: { ODriveIntf::MotorIntf::ConfigIntf::get_current_lim_margin(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 242: { ODriveIntf::MotorIntf::ConfigIntf::get_torque_lim(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 243: { ODriveIntf::MotorIntf::ConfigIntf::get_inverter_temp_limit_lower(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 244: { ODriveIntf::MotorIntf::ConfigIntf::get_inverter_temp_limit_upper(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 245: { ODriveIntf::MotorIntf::ConfigIntf::get_requested_current_range(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 246: { ODriveIntf::MotorIntf::ConfigIntf::get_current_control_bandwidth(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 247: { ODriveIntf::MotorIntf::ConfigIntf::get_acim_gain_min_flux(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 248: { ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_min_Id(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 249: { ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_enable(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 250: { ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_attack_gain(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 251: { ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_decay_gain(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 252: { ODriveIntf::MotorIntf::ConfigIntf::get_R_wL_FF_enable(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 253: { ODriveIntf::MotorIntf::ConfigIntf::get_bEMF_FF_enable(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 254: { ODriveIntf::MotorIntf::ConfigIntf::get_I_bus_hard_min(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 255: { ODriveIntf::MotorIntf::ConfigIntf::get_I_bus_hard_max(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 256: { ODriveIntf::MotorIntf::ConfigIntf::get_I_leak_max(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 257: { ODriveIntf::MotorIntf::ConfigIntf::get_dc_calib_tau(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 258: { ODriveIntf::ControllerIntf::get_error(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::ControllerIntf::Error>>::singleton; } break;
        case 259: { ODriveIntf::ControllerIntf::get_last_error_time(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 260: { ODriveIntf::ControllerIntf::get_input_pos(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 261: { ODriveIntf::ControllerIntf::get_input_vel(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 262: { ODriveIntf::ControllerIntf::get_input_torque(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 267: { ODriveIntf::ControllerIntf::get_vel_integrator_torque(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 268: { ODriveIntf::ControllerIntf::get_anticogging_valid(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 269: { ODriveIntf::ControllerIntf::get_autotuning_phase(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 270: { ODriveIntf::ControllerIntf::ConfigIntf::get_gain_scheduling_width(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 271: { ODriveIntf::ControllerIntf::ConfigIntf::get_enable_vel_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 272: { ODriveIntf::ControllerIntf::ConfigIntf::get_enable_torque_mode_vel_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 273: { ODriveIntf::ControllerIntf::ConfigIntf::get_enable_gain_scheduling(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 274: { ODriveIntf::ControllerIntf::ConfigIntf::get_enable_overspeed_error(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 275: { ODriveIntf::ControllerIntf::ConfigIntf::get_control_mode(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::ControllerIntf::ControlMode>>::singleton; } break;
        case 276: { ODriveIntf::ControllerIntf::ConfigIntf::get_input_mode(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::ControllerIntf::InputMode>>::singleton; } break;
        case 277: { ODriveIntf::ControllerIntf::ConfigIntf::get_pos_gain(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 278: { ODriveIntf::ControllerIntf::ConfigIntf::get_vel_gain(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 279: { ODriveIntf::ControllerIntf::ConfigIntf::get_vel_integrator_gain(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 280: { ODriveIntf::ControllerIntf::ConfigIntf::get_vel_integrator_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 281: { ODriveIntf::ControllerIntf::ConfigIntf::get_vel_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 282: { ODriveIntf::ControllerIntf::ConfigIntf::get_vel_limit_tolerance(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 283: { ODriveIntf::ControllerIntf::ConfigIntf::get_vel_ramp_rate(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 284: { ODriveIntf::ControllerIntf::ConfigIntf::get_torque_ramp_rate(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 285: { ODriveIntf::ControllerIntf::ConfigIntf::get_circular_setpoints(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 286: { ODriveIntf::ControllerIntf::ConfigIntf::get_circular_setpoint_range(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 287: { ODriveIntf::ControllerIntf::ConfigIntf::get_steps_per_circular_range(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 288: { ODriveIntf::ControllerIntf::ConfigIntf::get_homing_speed(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 289: { ODriveIntf::ControllerIntf::ConfigIntf::get_inertia(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 290: { ODriveIntf::ControllerIntf::ConfigIntf::get_axis_to_mirror(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint8_t>>::singleton; } break;
        case 291: { ODriveIntf::ControllerIntf::ConfigIntf::get_mirror_ratio(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 292: { ODriveIntf::ControllerIntf::ConfigIntf::get_torque_mirror_ratio(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 293: { ODriveIntf::ControllerIntf::ConfigIntf::get_load_encoder_axis(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint8_t>>::singleton; } break;
        case 294: { ODriveIntf::ControllerIntf::ConfigIntf::get_input_filter_bandwidth(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 296: { ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_pre_calibrated(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 298: { ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_calib_pos_threshold(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 299: { ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_calib_vel_threshold(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 301: { ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_anticogging_enabled(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 302: { ODriveIntf::ControllerIntf::ConfigIntf::get_mechanical_power_bandwidth(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 303: { ODriveIntf::ControllerIntf::ConfigIntf::get_electrical_power_bandwidth(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 304: { ODriveIntf::ControllerIntf::ConfigIntf::get_spinout_mechanical_power_threshold(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 305: { ODriveIntf::ControllerIntf::ConfigIntf::get_spinout_electrical_power_threshold(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 306: { ODriveIntf::ControllerIntf::AutotuningIntf::get_frequency(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 307: { ODriveIntf::ControllerIntf::AutotuningIntf::get_pos_amplitude(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 308: { ODriveIntf::ControllerIntf::AutotuningIntf::get_vel_amplitude(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 309: { ODriveIntf::ControllerIntf::AutotuningIntf::get_torque_amplitude(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 313: { ODriveIntf::ControllerIntf::get_move_incremental_in_displacement_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 314: { ODriveIntf::ControllerIntf::get_move_incremental_in_from_input_pos_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 319: { ODriveIntf::ControllerIntf::get_get_anticogging_value_in_index_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 321: { ODriveIntf::EncoderIntf::get_error(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::EncoderIntf::Error>>::singleton; } break;
        case 337: { ODriveIntf::EncoderIntf::get_pos_abs(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 339: { ODriveIntf::EncoderIntf::ConfigIntf::get_mode(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::EncoderIntf::Mode>>::singleton; } break;
        case 340: { ODriveIntf::EncoderIntf::ConfigIntf::get_use_index(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 341: { ODriveIntf::EncoderIntf::ConfigIntf::get_index_offset(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 342: { ODriveIntf::EncoderIntf::ConfigIntf::get_use_index_offset(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 343: { ODriveIntf::EncoderIntf::ConfigIntf::get_find_idx_on_lockin_only(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 344: { ODriveIntf::EncoderIntf::ConfigIntf::get_abs_spi_cs_gpio_pin(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 345: { ODriveIntf::EncoderIntf::ConfigIntf::get_cpr(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 346: { ODriveIntf::EncoderIntf::ConfigIntf::get_phase_offset(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 347: { ODriveIntf::EncoderIntf::ConfigIntf::get_phase_offset_float(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 348: { ODriveIntf::EncoderIntf::ConfigIntf::get_direction(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 349: { ODriveIntf::EncoderIntf::ConfigIntf::get_pre_calibrated(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 350: { ODriveIntf::EncoderIntf::ConfigIntf::get_enable_phase_interpolation(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 351: { ODriveIntf::EncoderIntf::ConfigIntf::get_bandwidth(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 352: { ODriveIntf::EncoderIntf::ConfigIntf::get_calib_range(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 353: { ODriveIntf::EncoderIntf::ConfigIntf::get_calib_scan_distance(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 354: { ODriveIntf::EncoderIntf::ConfigIntf::get_calib_scan_omega(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 355: { ODriveIntf::EncoderIntf::ConfigIntf::get_ignore_illegal_hall_state(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 356: { ODriveIntf::EncoderIntf::ConfigIntf::get_hall_polarity(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint8_t>>::singleton; } break;
        case 357: { ODriveIntf::EncoderIntf::ConfigIntf::get_hall_polarity_calibrated(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 358: { ODriveIntf::EncoderIntf::ConfigIntf::get_sincos_gpio_pin_sin(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 359: { ODriveIntf::EncoderIntf::ConfigIntf::get_sincos_gpio_pin_cos(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 361: { ODriveIntf::EncoderIntf::get_set_linear_count_in_count_(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 367: { ODriveIntf::AcimEstimatorIntf::ConfigIntf::get_slip_velocity(ODriveIntf::AcimEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_acim_estimator(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 368: { ODriveIntf::SensorlessEstimatorIntf::get_error(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis0(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::SensorlessEstimatorIntf::Error>>::singleton; } break;
        case 373: { ODriveIntf::SensorlessEstimatorIntf::ConfigIntf::get_observer_gain(ODriveIntf::SensorlessEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 374: { ODriveIntf::SensorlessEstimatorIntf::ConfigIntf::get_pll_bandwidth(ODriveIntf::SensorlessEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 375: { ODriveIntf::SensorlessEstimatorIntf::ConfigIntf::get_pm_flux_linkage(ODriveIntf::SensorlessEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 376: { ODriveIntf::TrapezoidalTrajectoryIntf::ConfigIntf::get_vel_limit(ODriveIntf::TrapezoidalTrajectoryIntf::get_config(ODriveIntf::AxisIntf::get_trap_traj(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 377: { ODriveIntf::TrapezoidalTrajectoryIntf::ConfigIntf::get_accel_limit(ODriveIntf::TrapezoidalTrajectoryIntf::get_config(ODriveIntf::AxisIntf::get_trap_traj(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 378: { ODriveIntf::TrapezoidalTrajectoryIntf::ConfigIntf::get_decel_limit(ODriveIntf::TrapezoidalTrajectoryIntf::get_config(ODriveIntf::AxisIntf::get_trap_traj(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 380: { ODriveIntf::EndstopIntf::ConfigIntf::get_gpio_num(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 381: { ODriveIntf::EndstopIntf::ConfigIntf::get_enabled(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 382: { ODriveIntf::EndstopIntf::ConfigIntf::get_offset(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 383: { ODriveIntf::EndstopIntf::ConfigIntf::get_is_active_high(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 384: { ODriveIntf::EndstopIntf::ConfigIntf::get_debounce_ms(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 386: { ODriveIntf::EndstopIntf::ConfigIntf::get_gpio_num(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 387: { ODriveIntf::EndstopIntf::ConfigIntf::get_enabled(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 388: { ODriveIntf::EndstopIntf::ConfigIntf::get_offset(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 389: { ODriveIntf::EndstopIntf::ConfigIntf::get_is_active_high(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 390: { ODriveIntf::EndstopIntf::ConfigIntf::get_debounce_ms(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 391: { ODriveIntf::MechanicalBrakeIntf::ConfigIntf::get_gpio_num(ODriveIntf::MechanicalBrakeIntf::get_config(ODriveIntf::AxisIntf::get_mechanical_brake(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 392: { ODriveIntf::MechanicalBrakeIntf::ConfigIntf::get_is_active_low(ODriveIntf::MechanicalBrakeIntf::get_config(ODriveIntf::AxisIntf::get_mechanical_brake(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 398: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_thermistor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 402: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_encoder_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 406: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_sensorless_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 410: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_endstop_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 414: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_can_heartbeat(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 418: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 422: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_open_loop_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 426: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_acim_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 430: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_motor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 434: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 438: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_dc_calib(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 442: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_sense(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 446: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_pwm_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 448: { ODriveIntf::AxisIntf::get_error(ODrive3Intf::get_axis1(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::AxisIntf::Error>>::singleton; } break;
        case 453: { ODriveIntf::AxisIntf::get_requested_state(ODrive3Intf::get_axis1(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::AxisIntf::AxisState>>::singleton; } break;
        case 454: { ODriveIntf::AxisIntf::get_is_homed(ODrive3Intf::get_axis1(&ep_root), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 455: { ODriveIntf::AxisIntf::ConfigIntf::get_startup_motor_calibration(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 456: { ODriveIntf::AxisIntf::ConfigIntf::get_startup_encoder_index_search(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 457: { ODriveIntf::AxisIntf::ConfigIntf::get_startup_encoder_offset_calibration(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 458: { ODriveIntf::AxisIntf::ConfigIntf::get_startup_closed_loop_control(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 459: { ODriveIntf::AxisIntf::ConfigIntf::get_startup_homing(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 460: { ODriveIntf::AxisIntf::ConfigIntf::get_enable_step_dir(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 461: { ODriveIntf::AxisIntf::ConfigIntf::get_step_dir_always_on(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 462: { ODriveIntf::AxisIntf::ConfigIntf::get_enable_sensorless_mode(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 463: { ODriveIntf::AxisIntf::ConfigIntf::get_watchdog_timeout(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 464: { ODriveIntf::AxisIntf::ConfigIntf::get_enable_watchdog(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 465: { ODriveIntf::AxisIntf::ConfigIntf::get_step_gpio_pin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 466: { ODriveIntf::AxisIntf::ConfigIntf::get_dir_gpio_pin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 467: { ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_current(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 468: { ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_ramp_time(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 469: { ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_ramp_distance(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 470: { ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_accel(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 471: { ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_vel(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 472: { ODriveIntf::AxisIntf::LockinConfigIntf::get_current(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 473: { ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_time(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 474: { ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_distance(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 475: { ODriveIntf::AxisIntf::LockinConfigIntf::get_accel(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 476: { ODriveIntf::AxisIntf::LockinConfigIntf::get_vel(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 477: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_distance(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 478: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_vel(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 479: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_distance(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 480: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_enc_idx(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 481: { ODriveIntf::AxisIntf::LockinConfigIntf::get_current(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 482: { ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_time(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 483: { ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_distance(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 484: { ODriveIntf::AxisIntf::LockinConfigIntf::get_accel(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 485: { ODriveIntf::AxisIntf::LockinConfigIntf::get_vel(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 486: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_distance(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 487: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_vel(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 488: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_distance(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 489: { ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_enc_idx(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 490: { ODriveIntf::AxisIntf::CanConfigIntf::get_node_id(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 491: { ODriveIntf::AxisIntf::CanConfigIntf::get_is_extended(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 492: { ODriveIntf::AxisIntf::CanConfigIntf::get_heartbeat_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 493: { ODriveIntf::AxisIntf::CanConfigIntf::get_encoder_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 494: { ODriveIntf::AxisIntf::CanConfigIntf::get_motor_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 495: { ODriveIntf::AxisIntf::CanConfigIntf::get_encoder_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 496: { ODriveIntf::AxisIntf::CanConfigIntf::get_controller_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 497: { ODriveIntf::AxisIntf::CanConfigIntf::get_sensorless_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 498: { ODriveIntf::AxisIntf::CanConfigIntf::get_encoder_count_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 499: { ODriveIntf::AxisIntf::CanConfigIntf::get_iq_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 500: { ODriveIntf::AxisIntf::CanConfigIntf::get_sensorless_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 501: { ODriveIntf::AxisIntf::CanConfigIntf::get_bus_vi_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 502: { ODriveIntf::MotorIntf::get_last_error_time(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 503: { ODriveIntf::MotorIntf::get_error(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::MotorIntf::Error>>::singleton; } break;
        case 509: { ODriveIntf::MotorIntf::get_DC_calib_phA(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 510: { ODriveIntf::MotorIntf::get_DC_calib_phB(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 511: { ODriveIntf::MotorIntf::get_DC_calib_phC(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 513: { ODriveIntf::MotorIntf::get_phase_current_rev_gain(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 518: { ODriveIntf::OnboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_lower(ODriveIntf::OnboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_fet_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 519: { ODriveIntf::OnboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_upper(ODriveIntf::OnboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_fet_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 520: { ODriveIntf::OnboardThermistorCurrentLimiterIntf::ConfigIntf::get_enabled(ODriveIntf::OnboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_fet_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 522: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_gpio_pin(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 523: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_0(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 524: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_1(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 525: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_2(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 526: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_3(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 527: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_lower(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 528: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_upper(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 529: { ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_enabled(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 532: { ODriveIntf::MotorIntf::CurrentControlIntf::get_I_measured_report_filter_k(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 544: { ODriveIntf::MotorIntf::CurrentControlIntf::get_v_current_control_integral_d(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 545: { ODriveIntf::MotorIntf::CurrentControlIntf::get_v_current_control_integral_q(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 550: { ODriveIntf::MotorIntf::ConfigIntf::get_pre_calibrated(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 551: { ODriveIntf::MotorIntf::ConfigIntf::get_pole_pairs(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 552: { ODriveIntf::MotorIntf::ConfigIntf::get_calibration_current(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 553: { ODriveIntf::MotorIntf::ConfigIntf::get_resistance_calib_max_voltage(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 554: { ODriveIntf::MotorIntf::ConfigIntf::get_phase_inductance(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 555: { ODriveIntf::MotorIntf::ConfigIntf::get_phase_resistance(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 556: { ODriveIntf::MotorIntf::ConfigIntf::get_torque_constant(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 557: { ODriveIntf::MotorIntf::ConfigIntf::get_motor_type(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::MotorIntf::MotorType>>::singleton; } break;
        case 558: { ODriveIntf::MotorIntf::ConfigIntf::get_current_lim(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 559: { ODriveIntf::MotorIntf::ConfigIntf::get_current_lim_margin(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 560: { ODriveIntf::MotorIntf::ConfigIntf::get_torque_lim(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 561: { ODriveIntf::MotorIntf::ConfigIntf::get_inverter_temp_limit_lower(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 562: { ODriveIntf::MotorIntf::ConfigIntf::get_inverter_temp_limit_upper(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 563: { ODriveIntf::MotorIntf::ConfigIntf::get_requested_current_range(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 564: { ODriveIntf::MotorIntf::ConfigIntf::get_current_control_bandwidth(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 565: { ODriveIntf::MotorIntf::ConfigIntf::get_acim_gain_min_flux(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 566: { ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_min_Id(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 567: { ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_enable(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 568: { ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_attack_gain(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 569: { ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_decay_gain(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 570: { ODriveIntf::MotorIntf::ConfigIntf::get_R_wL_FF_enable(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 571: { ODriveIntf::MotorIntf::ConfigIntf::get_bEMF_FF_enable(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 572: { ODriveIntf::MotorIntf::ConfigIntf::get_I_bus_hard_min(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 573: { ODriveIntf::MotorIntf::ConfigIntf::get_I_bus_hard_max(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 574: { ODriveIntf::MotorIntf::ConfigIntf::get_I_leak_max(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 575: { ODriveIntf::MotorIntf::ConfigIntf::get_dc_calib_tau(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 576: { ODriveIntf::ControllerIntf::get_error(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::ControllerIntf::Error>>::singleton; } break;
        case 577: { ODriveIntf::ControllerIntf::get_last_error_time(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 578: { ODriveIntf::ControllerIntf::get_input_pos(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 579: { ODriveIntf::ControllerIntf::get_input_vel(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 580: { ODriveIntf::ControllerIntf::get_input_torque(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 585: { ODriveIntf::ControllerIntf::get_vel_integrator_torque(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 586: { ODriveIntf::ControllerIntf::get_anticogging_valid(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 587: { ODriveIntf::ControllerIntf::get_autotuning_phase(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 588: { ODriveIntf::ControllerIntf::ConfigIntf::get_gain_scheduling_width(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 589: { ODriveIntf::ControllerIntf::ConfigIntf::get_enable_vel_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 590: { ODriveIntf::ControllerIntf::ConfigIntf::get_enable_torque_mode_vel_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 591: { ODriveIntf::ControllerIntf::ConfigIntf::get_enable_gain_scheduling(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 592: { ODriveIntf::ControllerIntf::ConfigIntf::get_enable_overspeed_error(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 593: { ODriveIntf::ControllerIntf::ConfigIntf::get_control_mode(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::ControllerIntf::ControlMode>>::singleton; } break;
        case 594: { ODriveIntf::ControllerIntf::ConfigIntf::get_input_mode(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::ControllerIntf::InputMode>>::singleton; } break;
        case 595: { ODriveIntf::ControllerIntf::ConfigIntf::get_pos_gain(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 596: { ODriveIntf::ControllerIntf::ConfigIntf::get_vel_gain(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 597: { ODriveIntf::ControllerIntf::ConfigIntf::get_vel_integrator_gain(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 598: { ODriveIntf::ControllerIntf::ConfigIntf::get_vel_integrator_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 599: { ODriveIntf::ControllerIntf::ConfigIntf::get_vel_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 600: { ODriveIntf::ControllerIntf::ConfigIntf::get_vel_limit_tolerance(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 601: { ODriveIntf::ControllerIntf::ConfigIntf::get_vel_ramp_rate(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 602: { ODriveIntf::ControllerIntf::ConfigIntf::get_torque_ramp_rate(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 603: { ODriveIntf::ControllerIntf::ConfigIntf::get_circular_setpoints(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 604: { ODriveIntf::ControllerIntf::ConfigIntf::get_circular_setpoint_range(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 605: { ODriveIntf::ControllerIntf::ConfigIntf::get_steps_per_circular_range(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 606: { ODriveIntf::ControllerIntf::ConfigIntf::get_homing_speed(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 607: { ODriveIntf::ControllerIntf::ConfigIntf::get_inertia(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 608: { ODriveIntf::ControllerIntf::ConfigIntf::get_axis_to_mirror(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint8_t>>::singleton; } break;
        case 609: { ODriveIntf::ControllerIntf::ConfigIntf::get_mirror_ratio(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 610: { ODriveIntf::ControllerIntf::ConfigIntf::get_torque_mirror_ratio(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 611: { ODriveIntf::ControllerIntf::ConfigIntf::get_load_encoder_axis(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint8_t>>::singleton; } break;
        case 612: { ODriveIntf::ControllerIntf::ConfigIntf::get_input_filter_bandwidth(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 614: { ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_pre_calibrated(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 616: { ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_calib_pos_threshold(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 617: { ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_calib_vel_threshold(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 619: { ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_anticogging_enabled(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 620: { ODriveIntf::ControllerIntf::ConfigIntf::get_mechanical_power_bandwidth(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 621: { ODriveIntf::ControllerIntf::ConfigIntf::get_electrical_power_bandwidth(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 622: { ODriveIntf::ControllerIntf::ConfigIntf::get_spinout_mechanical_power_threshold(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 623: { ODriveIntf::ControllerIntf::ConfigIntf::get_spinout_electrical_power_threshold(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 624: { ODriveIntf::ControllerIntf::AutotuningIntf::get_frequency(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 625: { ODriveIntf::ControllerIntf::AutotuningIntf::get_pos_amplitude(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 626: { ODriveIntf::ControllerIntf::AutotuningIntf::get_vel_amplitude(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 627: { ODriveIntf::ControllerIntf::AutotuningIntf::get_torque_amplitude(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 631: { ODriveIntf::ControllerIntf::get_move_incremental_in_displacement_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 632: { ODriveIntf::ControllerIntf::get_move_incremental_in_from_input_pos_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 637: { ODriveIntf::ControllerIntf::get_get_anticogging_value_in_index_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 639: { ODriveIntf::EncoderIntf::get_error(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::EncoderIntf::Error>>::singleton; } break;
        case 655: { ODriveIntf::EncoderIntf::get_pos_abs(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 657: { ODriveIntf::EncoderIntf::ConfigIntf::get_mode(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::EncoderIntf::Mode>>::singleton; } break;
        case 658: { ODriveIntf::EncoderIntf::ConfigIntf::get_use_index(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 659: { ODriveIntf::EncoderIntf::ConfigIntf::get_index_offset(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 660: { ODriveIntf::EncoderIntf::ConfigIntf::get_use_index_offset(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 661: { ODriveIntf::EncoderIntf::ConfigIntf::get_find_idx_on_lockin_only(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 662: { ODriveIntf::EncoderIntf::ConfigIntf::get_abs_spi_cs_gpio_pin(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 663: { ODriveIntf::EncoderIntf::ConfigIntf::get_cpr(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 664: { ODriveIntf::EncoderIntf::ConfigIntf::get_phase_offset(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 665: { ODriveIntf::EncoderIntf::ConfigIntf::get_phase_offset_float(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 666: { ODriveIntf::EncoderIntf::ConfigIntf::get_direction(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 667: { ODriveIntf::EncoderIntf::ConfigIntf::get_pre_calibrated(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 668: { ODriveIntf::EncoderIntf::ConfigIntf::get_enable_phase_interpolation(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 669: { ODriveIntf::EncoderIntf::ConfigIntf::get_bandwidth(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 670: { ODriveIntf::EncoderIntf::ConfigIntf::get_calib_range(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 671: { ODriveIntf::EncoderIntf::ConfigIntf::get_calib_scan_distance(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 672: { ODriveIntf::EncoderIntf::ConfigIntf::get_calib_scan_omega(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 673: { ODriveIntf::EncoderIntf::ConfigIntf::get_ignore_illegal_hall_state(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 674: { ODriveIntf::EncoderIntf::ConfigIntf::get_hall_polarity(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint8_t>>::singleton; } break;
        case 675: { ODriveIntf::EncoderIntf::ConfigIntf::get_hall_polarity_calibrated(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 676: { ODriveIntf::EncoderIntf::ConfigIntf::get_sincos_gpio_pin_sin(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 677: { ODriveIntf::EncoderIntf::ConfigIntf::get_sincos_gpio_pin_cos(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 679: { ODriveIntf::EncoderIntf::get_set_linear_count_in_count_(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 685: { ODriveIntf::AcimEstimatorIntf::ConfigIntf::get_slip_velocity(ODriveIntf::AcimEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_acim_estimator(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 686: { ODriveIntf::SensorlessEstimatorIntf::get_error(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis1(&ep_root)), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<ODriveIntf::SensorlessEstimatorIntf::Error>>::singleton; } break;
        case 691: { ODriveIntf::SensorlessEstimatorIntf::ConfigIntf::get_observer_gain(ODriveIntf::SensorlessEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 692: { ODriveIntf::SensorlessEstimatorIntf::ConfigIntf::get_pll_bandwidth(ODriveIntf::SensorlessEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 693: { ODriveIntf::SensorlessEstimatorIntf::ConfigIntf::get_pm_flux_linkage(ODriveIntf::SensorlessEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 694: { ODriveIntf::TrapezoidalTrajectoryIntf::ConfigIntf::get_vel_limit(ODriveIntf::TrapezoidalTrajectoryIntf::get_config(ODriveIntf::AxisIntf::get_trap_traj(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 695: { ODriveIntf::TrapezoidalTrajectoryIntf::ConfigIntf::get_accel_limit(ODriveIntf::TrapezoidalTrajectoryIntf::get_config(ODriveIntf::AxisIntf::get_trap_traj(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 696: { ODriveIntf::TrapezoidalTrajectoryIntf::ConfigIntf::get_decel_limit(ODriveIntf::TrapezoidalTrajectoryIntf::get_config(ODriveIntf::AxisIntf::get_trap_traj(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 698: { ODriveIntf::EndstopIntf::ConfigIntf::get_gpio_num(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 699: { ODriveIntf::EndstopIntf::ConfigIntf::get_enabled(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 700: { ODriveIntf::EndstopIntf::ConfigIntf::get_offset(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 701: { ODriveIntf::EndstopIntf::ConfigIntf::get_is_active_high(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 702: { ODriveIntf::EndstopIntf::ConfigIntf::get_debounce_ms(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 704: { ODriveIntf::EndstopIntf::ConfigIntf::get_gpio_num(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 705: { ODriveIntf::EndstopIntf::ConfigIntf::get_enabled(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 706: { ODriveIntf::EndstopIntf::ConfigIntf::get_offset(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<float>>::singleton; } break;
        case 707: { ODriveIntf::EndstopIntf::ConfigIntf::get_is_active_high(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 708: { ODriveIntf::EndstopIntf::ConfigIntf::get_debounce_ms(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 709: { ODriveIntf::MechanicalBrakeIntf::ConfigIntf::get_gpio_num(ODriveIntf::MechanicalBrakeIntf::get_config(ODriveIntf::AxisIntf::get_mechanical_brake(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint16_t>>::singleton; } break;
        case 710: { ODriveIntf::MechanicalBrakeIntf::ConfigIntf::get_is_active_low(ODriveIntf::MechanicalBrakeIntf::get_config(ODriveIntf::AxisIntf::get_mechanical_brake(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<bool>>::singleton; } break;
        case 716: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_thermistor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 720: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_encoder_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 724: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_sensorless_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 728: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_endstop_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 732: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_can_heartbeat(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 736: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 740: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_open_loop_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 744: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_acim_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 748: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_motor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 752: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 756: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_dc_calib(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 760: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_sense(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 764: { ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_pwm_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))), &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 767: { ODrive3Intf::get_test_function_in_delta_(&ep_root, &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 770: { ODrive3Intf::get_get_adc_voltage_in_gpio_(&ep_root, &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint32_t>>::singleton; } break;
        case 778: { ODrive3Intf::get_get_interrupt_status_in_irqn_(&ep_root, &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<int32_t>>::singleton; } break;
        case 781: { ODrive3Intf::get_get_dma_status_in_stream_num_(&ep_root, &result.storage_); result.type_info_ = &FibrePropertyTypeInfo<Property<uint8_t>>::singleton; } break;
        default: break;
    }
}


bool endpoint_handler(int idx, cbufptr_t* input_buffer, bufptr_t* output_buffer) {
    //Introspectable property = get_property(idx);
    //if property.is_valid()

    switch (idx) {
        case 0: { return endpoint0_handler(input_buffer, output_buffer); } break;
        case 1: { return fibre_property_odrive_error_readwrite_exchange(static_cast<Property<ODriveIntf::Error>>(ODrive3Intf::get_error(&ep_root)), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 2: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODrive3Intf::get_vbus_voltage(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 3: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODrive3Intf::get_ibus(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 4: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODrive3Intf::get_ibus_report_filter_k(&ep_root)), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 5: { return fibre_property_uint64_readonly_read(static_cast<Property<const uint64_t>>(ODrive3Intf::get_serial_number(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 6: { return fibre_property_uint8_readonly_read(static_cast<Property<const uint8_t>>(ODrive3Intf::get_hw_version_major(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 7: { return fibre_property_uint8_readonly_read(static_cast<Property<const uint8_t>>(ODrive3Intf::get_hw_version_minor(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 8: { return fibre_property_uint8_readonly_read(static_cast<Property<const uint8_t>>(ODrive3Intf::get_hw_version_variant(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 9: { return fibre_property_uint8_readonly_read(static_cast<Property<const uint8_t>>(ODrive3Intf::get_fw_version_major(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 10: { return fibre_property_uint8_readonly_read(static_cast<Property<const uint8_t>>(ODrive3Intf::get_fw_version_minor(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 11: { return fibre_property_uint8_readonly_read(static_cast<Property<const uint8_t>>(ODrive3Intf::get_fw_version_revision(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 12: { return fibre_property_uint8_readonly_read(static_cast<Property<const uint8_t>>(ODrive3Intf::get_fw_version_unreleased(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 13: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODrive3Intf::get_brake_resistor_armed(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 14: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODrive3Intf::get_brake_resistor_saturated(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 15: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODrive3Intf::get_brake_resistor_current(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 16: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODrive3Intf::get_n_evt_sampling(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 17: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODrive3Intf::get_n_evt_control_loop(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 18: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODrive3Intf::get_task_timers_armed(&ep_root)), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 19: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::TaskTimesIntf::get_sampling(ODrive3Intf::get_task_times(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 20: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::TaskTimesIntf::get_sampling(ODrive3Intf::get_task_times(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 21: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::TaskTimesIntf::get_sampling(ODrive3Intf::get_task_times(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 22: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::TaskTimesIntf::get_sampling(ODrive3Intf::get_task_times(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 23: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::TaskTimesIntf::get_control_loop_misc(ODrive3Intf::get_task_times(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 24: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::TaskTimesIntf::get_control_loop_misc(ODrive3Intf::get_task_times(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 25: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::TaskTimesIntf::get_control_loop_misc(ODrive3Intf::get_task_times(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 26: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::TaskTimesIntf::get_control_loop_misc(ODrive3Intf::get_task_times(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 27: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::TaskTimesIntf::get_control_loop_checks(ODrive3Intf::get_task_times(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 28: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::TaskTimesIntf::get_control_loop_checks(ODrive3Intf::get_task_times(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 29: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::TaskTimesIntf::get_control_loop_checks(ODrive3Intf::get_task_times(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 30: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::TaskTimesIntf::get_control_loop_checks(ODrive3Intf::get_task_times(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 31: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::TaskTimesIntf::get_dc_calib_wait(ODrive3Intf::get_task_times(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 32: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::TaskTimesIntf::get_dc_calib_wait(ODrive3Intf::get_task_times(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 33: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::TaskTimesIntf::get_dc_calib_wait(ODrive3Intf::get_task_times(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 34: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::TaskTimesIntf::get_dc_calib_wait(ODrive3Intf::get_task_times(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 35: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::get_uptime(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 36: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::get_min_heap_space(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 37: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::get_max_stack_usage_axis(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 38: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::get_max_stack_usage_usb(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 39: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::get_max_stack_usage_uart(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 40: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::get_max_stack_usage_can(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 41: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::get_max_stack_usage_startup(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 42: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::get_max_stack_usage_analog(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 43: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::get_stack_size_axis(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 44: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::get_stack_size_usb(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 45: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::get_stack_size_uart(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 46: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::get_stack_size_startup(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 47: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::get_stack_size_can(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 48: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::get_stack_size_analog(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 49: { return fibre_property_int32_readonly_read(static_cast<Property<const int32_t>>(ODriveIntf::SystemStatsIntf::get_prio_axis(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 50: { return fibre_property_int32_readonly_read(static_cast<Property<const int32_t>>(ODriveIntf::SystemStatsIntf::get_prio_usb(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 51: { return fibre_property_int32_readonly_read(static_cast<Property<const int32_t>>(ODriveIntf::SystemStatsIntf::get_prio_uart(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 52: { return fibre_property_int32_readonly_read(static_cast<Property<const int32_t>>(ODriveIntf::SystemStatsIntf::get_prio_startup(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 53: { return fibre_property_int32_readonly_read(static_cast<Property<const int32_t>>(ODriveIntf::SystemStatsIntf::get_prio_can(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 54: { return fibre_property_int32_readonly_read(static_cast<Property<const int32_t>>(ODriveIntf::SystemStatsIntf::get_prio_analog(ODrive3Intf::get_system_stats(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 55: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::UsbIntf::get_rx_cnt(ODriveIntf::SystemStatsIntf::get_usb(ODrive3Intf::get_system_stats(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 56: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::UsbIntf::get_tx_cnt(ODriveIntf::SystemStatsIntf::get_usb(ODrive3Intf::get_system_stats(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 57: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::UsbIntf::get_tx_overrun_cnt(ODriveIntf::SystemStatsIntf::get_usb(ODrive3Intf::get_system_stats(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 58: { return fibre_property_uint8_readonly_read(static_cast<Property<const uint8_t>>(ODriveIntf::SystemStatsIntf::I2CIntf::get_addr(ODriveIntf::SystemStatsIntf::get_i2c(ODrive3Intf::get_system_stats(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 59: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::I2CIntf::get_addr_match_cnt(ODriveIntf::SystemStatsIntf::get_i2c(ODrive3Intf::get_system_stats(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 60: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::I2CIntf::get_rx_cnt(ODriveIntf::SystemStatsIntf::get_i2c(ODrive3Intf::get_system_stats(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 61: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::SystemStatsIntf::I2CIntf::get_error_cnt(ODriveIntf::SystemStatsIntf::get_i2c(ODrive3Intf::get_system_stats(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 62: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODrive3Intf::get_user_config_loaded(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 63: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODrive3Intf::get_misconfigured(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 64: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::OscilloscopeIntf::get_size(ODrive3Intf::get_oscilloscope(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 65: { return odrive_oscilloscope_get_val(static_cast<ODriveIntf::OscilloscopeIntf*>(ODrive3Intf::get_oscilloscope(&ep_root)), static_cast<uint32_t>((ODrive3Intf::get_oscilloscope(&ep_root))->get_val_in_index_), static_cast<float*>(&(ODrive3Intf::get_oscilloscope(&ep_root))->get_val_out_val_), input_buffer, output_buffer); } break;
        case 66: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::OscilloscopeIntf::get_get_val_in_index_(ODrive3Intf::get_oscilloscope(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 67: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::OscilloscopeIntf::get_get_val_out_val_(ODrive3Intf::get_oscilloscope(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 68: { return fibre_property_odrive_can_error_readwrite_exchange(static_cast<Property<ODriveIntf::CanIntf::Error>>(ODriveIntf::CanIntf::get_error(ODrive3Intf::get_can(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 69: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::CanIntf::ConfigIntf::get_baud_rate(ODriveIntf::CanIntf::get_config(ODrive3Intf::get_can(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 70: { return fibre_property_odrive_can_protocol_readwrite_exchange(static_cast<Property<ODriveIntf::CanIntf::Protocol>>(ODriveIntf::CanIntf::ConfigIntf::get_protocol(ODriveIntf::CanIntf::get_config(ODrive3Intf::get_can(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 71: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODrive3Intf::get_test_property(&ep_root)), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 72: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODrive3Intf::get_otp_valid(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 73: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODrive3Intf::ConfigIntf::get_enable_uart_a(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 74: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODrive3Intf::ConfigIntf::get_enable_uart_b(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 75: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODrive3Intf::ConfigIntf::get_enable_uart_c(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 76: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODrive3Intf::ConfigIntf::get_uart_a_baudrate(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 77: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODrive3Intf::ConfigIntf::get_uart_b_baudrate(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 78: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODrive3Intf::ConfigIntf::get_uart_c_baudrate(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 79: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODrive3Intf::ConfigIntf::get_enable_can_a(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 80: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODrive3Intf::ConfigIntf::get_enable_i2c_a(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 81: { return fibre_property_odrive_stream_protocol_type_readwrite_exchange(static_cast<Property<ODriveIntf::StreamProtocolType>>(ODrive3Intf::ConfigIntf::get_usb_cdc_protocol(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 82: { return fibre_property_odrive_stream_protocol_type_readwrite_exchange(static_cast<Property<ODriveIntf::StreamProtocolType>>(ODrive3Intf::ConfigIntf::get_uart0_protocol(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 83: { return fibre_property_odrive_stream_protocol_type_readwrite_exchange(static_cast<Property<ODriveIntf::StreamProtocolType>>(ODrive3Intf::ConfigIntf::get_uart1_protocol(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 84: { return fibre_property_odrive_stream_protocol_type_readwrite_exchange(static_cast<Property<ODriveIntf::StreamProtocolType>>(ODrive3Intf::ConfigIntf::get_uart2_protocol(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 85: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODrive3Intf::ConfigIntf::get_max_regen_current(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 86: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODrive3Intf::ConfigIntf::get_brake_resistance(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 87: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODrive3Intf::ConfigIntf::get_enable_brake_resistor(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 88: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODrive3Intf::ConfigIntf::get_dc_bus_undervoltage_trip_level(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 89: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODrive3Intf::ConfigIntf::get_dc_bus_overvoltage_trip_level(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 90: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODrive3Intf::ConfigIntf::get_enable_dc_bus_overvoltage_ramp(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 91: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODrive3Intf::ConfigIntf::get_dc_bus_overvoltage_ramp_start(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 92: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODrive3Intf::ConfigIntf::get_dc_bus_overvoltage_ramp_end(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 93: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODrive3Intf::ConfigIntf::get_dc_max_positive_current(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 94: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODrive3Intf::ConfigIntf::get_dc_max_negative_current(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 95: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODrive3Intf::ConfigIntf::get_error_gpio_pin(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 96: { return fibre_property_endpoint_ref_readwrite_exchange(static_cast<Property<endpoint_ref_t>>(ODriveIntf::EndpointIntf::get_endpoint(ODrive3Intf::ConfigIntf::get_gpio3_analog_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 97: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndpointIntf::get_min(ODrive3Intf::ConfigIntf::get_gpio3_analog_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 98: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndpointIntf::get_max(ODrive3Intf::ConfigIntf::get_gpio3_analog_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 99: { return fibre_property_endpoint_ref_readwrite_exchange(static_cast<Property<endpoint_ref_t>>(ODriveIntf::EndpointIntf::get_endpoint(ODrive3Intf::ConfigIntf::get_gpio4_analog_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 100: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndpointIntf::get_min(ODrive3Intf::ConfigIntf::get_gpio4_analog_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 101: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndpointIntf::get_max(ODrive3Intf::ConfigIntf::get_gpio4_analog_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 102: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio1_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 103: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio2_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 104: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio3_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 105: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio4_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 106: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio5_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 107: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio6_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 108: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio7_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 109: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio8_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 110: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio9_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 111: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio10_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 112: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio11_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 113: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio12_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 114: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio13_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 115: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio14_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 116: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio15_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 117: { return fibre_property_odrive_gpio_mode_readwrite_exchange(static_cast<Property<ODriveIntf::GpioMode>>(ODrive3Intf::ConfigIntf::get_gpio16_mode(ODrive3Intf::get_config(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 118: { return fibre_property_endpoint_ref_readwrite_exchange(static_cast<Property<endpoint_ref_t>>(ODriveIntf::EndpointIntf::get_endpoint(ODrive3Intf::ConfigIntf::get_gpio1_pwm_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 119: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndpointIntf::get_min(ODrive3Intf::ConfigIntf::get_gpio1_pwm_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 120: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndpointIntf::get_max(ODrive3Intf::ConfigIntf::get_gpio1_pwm_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 121: { return fibre_property_endpoint_ref_readwrite_exchange(static_cast<Property<endpoint_ref_t>>(ODriveIntf::EndpointIntf::get_endpoint(ODrive3Intf::ConfigIntf::get_gpio2_pwm_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 122: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndpointIntf::get_min(ODrive3Intf::ConfigIntf::get_gpio2_pwm_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 123: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndpointIntf::get_max(ODrive3Intf::ConfigIntf::get_gpio2_pwm_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 124: { return fibre_property_endpoint_ref_readwrite_exchange(static_cast<Property<endpoint_ref_t>>(ODriveIntf::EndpointIntf::get_endpoint(ODrive3Intf::ConfigIntf::get_gpio3_pwm_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 125: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndpointIntf::get_min(ODrive3Intf::ConfigIntf::get_gpio3_pwm_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 126: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndpointIntf::get_max(ODrive3Intf::ConfigIntf::get_gpio3_pwm_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 127: { return fibre_property_endpoint_ref_readwrite_exchange(static_cast<Property<endpoint_ref_t>>(ODriveIntf::EndpointIntf::get_endpoint(ODrive3Intf::ConfigIntf::get_gpio4_pwm_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 128: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndpointIntf::get_min(ODrive3Intf::ConfigIntf::get_gpio4_pwm_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 129: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndpointIntf::get_max(ODrive3Intf::ConfigIntf::get_gpio4_pwm_mapping(ODrive3Intf::get_config(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 130: { return fibre_property_odrive_axis_error_readwrite_exchange(static_cast<Property<ODriveIntf::AxisIntf::Error>>(ODriveIntf::AxisIntf::get_error(ODrive3Intf::get_axis0(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 131: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::AxisIntf::get_step_dir_active(ODrive3Intf::get_axis0(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 132: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::AxisIntf::get_last_drv_fault(ODrive3Intf::get_axis0(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 133: { return fibre_property_int64_readonly_read(static_cast<Property<const int64_t>>(ODriveIntf::AxisIntf::get_steps(ODrive3Intf::get_axis0(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 134: { return fibre_property_odrive_axis_axis_state_readonly_read(static_cast<Property<const ODriveIntf::AxisIntf::AxisState>>(ODriveIntf::AxisIntf::get_current_state(ODrive3Intf::get_axis0(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 135: { return fibre_property_odrive_axis_axis_state_readwrite_exchange(static_cast<Property<ODriveIntf::AxisIntf::AxisState>>(ODriveIntf::AxisIntf::get_requested_state(ODrive3Intf::get_axis0(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 136: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::get_is_homed(ODrive3Intf::get_axis0(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 137: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_startup_motor_calibration(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 138: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_startup_encoder_index_search(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 139: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_startup_encoder_offset_calibration(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 140: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_startup_closed_loop_control(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 141: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_startup_homing(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 142: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_enable_step_dir(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 143: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_step_dir_always_on(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 144: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_enable_sensorless_mode(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 145: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::ConfigIntf::get_watchdog_timeout(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 146: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_enable_watchdog(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 147: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::AxisIntf::ConfigIntf::get_step_gpio_pin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 148: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::AxisIntf::ConfigIntf::get_dir_gpio_pin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 149: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_current(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 150: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_ramp_time(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 151: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_ramp_distance(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 152: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_accel(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 153: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_vel(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 154: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_current(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 155: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_time(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 156: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_distance(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 157: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_accel(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 158: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_vel(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 159: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_distance(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 160: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_vel(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 161: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_distance(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 162: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_enc_idx(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 163: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_current(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 164: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_time(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 165: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_distance(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 166: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_accel(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 167: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_vel(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 168: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_distance(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 169: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_vel(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 170: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_distance(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 171: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_enc_idx(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 172: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_node_id(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 173: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::CanConfigIntf::get_is_extended(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 174: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_heartbeat_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 175: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_encoder_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 176: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_motor_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 177: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_encoder_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 178: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_controller_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 179: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_sensorless_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 180: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_encoder_count_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 181: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_iq_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 182: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_sensorless_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 183: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_bus_vi_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 184: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::get_last_error_time(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 185: { return fibre_property_odrive_motor_error_readwrite_exchange(static_cast<Property<ODriveIntf::MotorIntf::Error>>(ODriveIntf::MotorIntf::get_error(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 186: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::MotorIntf::get_is_armed(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 187: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::MotorIntf::get_is_calibrated(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 188: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::get_current_meas_phA(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 189: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::get_current_meas_phB(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 190: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::get_current_meas_phC(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 191: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::get_DC_calib_phA(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 192: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::get_DC_calib_phB(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 193: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::get_DC_calib_phC(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 194: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::get_I_bus(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 195: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::get_phase_current_rev_gain(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 196: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::get_effective_current_lim(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 197: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::get_max_allowed_current(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 198: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::get_max_dc_calib(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 199: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::OnboardThermistorCurrentLimiterIntf::get_temperature(ODriveIntf::MotorIntf::get_fet_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 200: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OnboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_lower(ODriveIntf::OnboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_fet_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 201: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OnboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_upper(ODriveIntf::OnboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_fet_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 202: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::OnboardThermistorCurrentLimiterIntf::ConfigIntf::get_enabled(ODriveIntf::OnboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_fet_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 203: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_temperature(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 204: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_gpio_pin(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 205: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_0(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 206: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_1(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 207: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_2(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 208: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_3(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 209: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_lower(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 210: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_upper(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 211: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_enabled(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 212: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_p_gain(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 213: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_i_gain(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 214: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_I_measured_report_filter_k(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 215: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Id_setpoint(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 216: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Iq_setpoint(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 217: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Vd_setpoint(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 218: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Vq_setpoint(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 219: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_phase(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 220: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_phase_vel(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 221: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Ialpha_measured(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 222: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Ibeta_measured(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 223: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Id_measured(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 224: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Iq_measured(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 225: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_power(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 226: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_v_current_control_integral_d(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 227: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_v_current_control_integral_q(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 228: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_final_v_alpha(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 229: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_final_v_beta(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 230: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::MotorIntf::get_n_evt_current_measurement(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 231: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::MotorIntf::get_n_evt_pwm_update(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 232: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::MotorIntf::ConfigIntf::get_pre_calibrated(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 233: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODriveIntf::MotorIntf::ConfigIntf::get_pole_pairs(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 234: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_calibration_current(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 235: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_resistance_calib_max_voltage(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 236: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_phase_inductance(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 237: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_phase_resistance(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 238: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_torque_constant(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 239: { return fibre_property_odrive_motor_motor_type_readwrite_exchange(static_cast<Property<ODriveIntf::MotorIntf::MotorType>>(ODriveIntf::MotorIntf::ConfigIntf::get_motor_type(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 240: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_current_lim(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 241: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_current_lim_margin(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 242: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_torque_lim(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 243: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_inverter_temp_limit_lower(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 244: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_inverter_temp_limit_upper(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 245: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_requested_current_range(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 246: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_current_control_bandwidth(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 247: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_acim_gain_min_flux(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 248: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_min_Id(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 249: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_enable(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 250: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_attack_gain(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 251: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_decay_gain(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 252: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::MotorIntf::ConfigIntf::get_R_wL_FF_enable(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 253: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::MotorIntf::ConfigIntf::get_bEMF_FF_enable(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 254: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_I_bus_hard_min(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 255: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_I_bus_hard_max(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 256: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_I_leak_max(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 257: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_dc_calib_tau(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 258: { return fibre_property_odrive_controller_error_readwrite_exchange(static_cast<Property<ODriveIntf::ControllerIntf::Error>>(ODriveIntf::ControllerIntf::get_error(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 259: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::get_last_error_time(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 260: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::get_input_pos(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 261: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::get_input_vel(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 262: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::get_input_torque(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 263: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::get_pos_setpoint(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 264: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::get_vel_setpoint(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 265: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::get_torque_setpoint(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 266: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::ControllerIntf::get_trajectory_done(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 267: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::get_vel_integrator_torque(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 268: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::get_anticogging_valid(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 269: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::get_autotuning_phase(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 270: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_gain_scheduling_width(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 271: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::ConfigIntf::get_enable_vel_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 272: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::ConfigIntf::get_enable_torque_mode_vel_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 273: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::ConfigIntf::get_enable_gain_scheduling(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 274: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::ConfigIntf::get_enable_overspeed_error(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 275: { return fibre_property_odrive_controller_control_mode_readwrite_exchange(static_cast<Property<ODriveIntf::ControllerIntf::ControlMode>>(ODriveIntf::ControllerIntf::ConfigIntf::get_control_mode(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 276: { return fibre_property_odrive_controller_input_mode_readwrite_exchange(static_cast<Property<ODriveIntf::ControllerIntf::InputMode>>(ODriveIntf::ControllerIntf::ConfigIntf::get_input_mode(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 277: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_pos_gain(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 278: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_vel_gain(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 279: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_vel_integrator_gain(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 280: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_vel_integrator_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 281: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_vel_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 282: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_vel_limit_tolerance(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 283: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_vel_ramp_rate(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 284: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_torque_ramp_rate(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 285: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::ConfigIntf::get_circular_setpoints(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 286: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_circular_setpoint_range(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 287: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODriveIntf::ControllerIntf::ConfigIntf::get_steps_per_circular_range(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 288: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_homing_speed(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 289: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_inertia(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 290: { return fibre_property_uint8_readwrite_exchange(static_cast<Property<uint8_t>>(ODriveIntf::ControllerIntf::ConfigIntf::get_axis_to_mirror(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 291: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_mirror_ratio(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 292: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_torque_mirror_ratio(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 293: { return fibre_property_uint8_readwrite_exchange(static_cast<Property<uint8_t>>(ODriveIntf::ControllerIntf::ConfigIntf::get_load_encoder_axis(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 294: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_input_filter_bandwidth(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 295: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_index(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))))), nullptr, input_buffer, output_buffer); } break;
        case 296: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_pre_calibrated(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 297: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_calib_anticogging(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))))), nullptr, input_buffer, output_buffer); } break;
        case 298: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_calib_pos_threshold(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 299: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_calib_vel_threshold(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 300: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_cogging_ratio(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))))), nullptr, input_buffer, output_buffer); } break;
        case 301: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_anticogging_enabled(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 302: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_mechanical_power_bandwidth(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 303: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_electrical_power_bandwidth(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 304: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_spinout_mechanical_power_threshold(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 305: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_spinout_electrical_power_threshold(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 306: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::AutotuningIntf::get_frequency(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 307: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::AutotuningIntf::get_pos_amplitude(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 308: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::AutotuningIntf::get_vel_amplitude(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 309: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::AutotuningIntf::get_torque_amplitude(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 310: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::get_mechanical_power(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 311: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::get_electrical_power(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 312: { return odrive_controller_move_incremental(static_cast<ODriveIntf::ControllerIntf*>(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), static_cast<float>((ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))->move_incremental_in_displacement_), static_cast<bool>((ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))->move_incremental_in_from_input_pos_), input_buffer, output_buffer); } break;
        case 313: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::get_move_incremental_in_displacement_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 314: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::get_move_incremental_in_from_input_pos_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 315: { return odrive_controller_start_anticogging_calibration(static_cast<ODriveIntf::ControllerIntf*>(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), input_buffer, output_buffer); } break;
        case 316: { return odrive_controller_remove_anticogging_bias(static_cast<ODriveIntf::ControllerIntf*>(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), static_cast<float*>(&(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))->remove_anticogging_bias_out_val_), input_buffer, output_buffer); } break;
        case 317: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::get_remove_anticogging_bias_out_val_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 318: { return odrive_controller_get_anticogging_value(static_cast<ODriveIntf::ControllerIntf*>(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root))), static_cast<uint32_t>((ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))->get_anticogging_value_in_index_), static_cast<float*>(&(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))->get_anticogging_value_out_val_), input_buffer, output_buffer); } break;
        case 319: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::ControllerIntf::get_get_anticogging_value_in_index_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 320: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::get_get_anticogging_value_out_val_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 321: { return fibre_property_odrive_encoder_error_readwrite_exchange(static_cast<Property<ODriveIntf::EncoderIntf::Error>>(ODriveIntf::EncoderIntf::get_error(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 322: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::EncoderIntf::get_is_ready(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 323: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::EncoderIntf::get_index_found(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 324: { return fibre_property_int32_readonly_read(static_cast<Property<const int32_t>>(ODriveIntf::EncoderIntf::get_shadow_count(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 325: { return fibre_property_int32_readonly_read(static_cast<Property<const int32_t>>(ODriveIntf::EncoderIntf::get_count_in_cpr(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 326: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_interpolation(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 327: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_phase(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 328: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_pos_estimate(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 329: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_pos_estimate_counts(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 330: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_pos_circular(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 331: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_pos_cpr_counts(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 332: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_delta_pos_cpr_counts(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 333: { return fibre_property_uint8_readonly_read(static_cast<Property<const uint8_t>>(ODriveIntf::EncoderIntf::get_hall_state(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 334: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_vel_estimate(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 335: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_vel_estimate_counts(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 336: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_calib_scan_response(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 337: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODriveIntf::EncoderIntf::get_pos_abs(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 338: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_spi_error_rate(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 339: { return fibre_property_odrive_encoder_mode_readwrite_exchange(static_cast<Property<ODriveIntf::EncoderIntf::Mode>>(ODriveIntf::EncoderIntf::ConfigIntf::get_mode(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 340: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EncoderIntf::ConfigIntf::get_use_index(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 341: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EncoderIntf::ConfigIntf::get_index_offset(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 342: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EncoderIntf::ConfigIntf::get_use_index_offset(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 343: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EncoderIntf::ConfigIntf::get_find_idx_on_lockin_only(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 344: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::EncoderIntf::ConfigIntf::get_abs_spi_cs_gpio_pin(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 345: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODriveIntf::EncoderIntf::ConfigIntf::get_cpr(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 346: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODriveIntf::EncoderIntf::ConfigIntf::get_phase_offset(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 347: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EncoderIntf::ConfigIntf::get_phase_offset_float(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 348: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODriveIntf::EncoderIntf::ConfigIntf::get_direction(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 349: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EncoderIntf::ConfigIntf::get_pre_calibrated(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 350: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EncoderIntf::ConfigIntf::get_enable_phase_interpolation(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 351: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EncoderIntf::ConfigIntf::get_bandwidth(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 352: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EncoderIntf::ConfigIntf::get_calib_range(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 353: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EncoderIntf::ConfigIntf::get_calib_scan_distance(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 354: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EncoderIntf::ConfigIntf::get_calib_scan_omega(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 355: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EncoderIntf::ConfigIntf::get_ignore_illegal_hall_state(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 356: { return fibre_property_uint8_readwrite_exchange(static_cast<Property<uint8_t>>(ODriveIntf::EncoderIntf::ConfigIntf::get_hall_polarity(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 357: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EncoderIntf::ConfigIntf::get_hall_polarity_calibrated(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 358: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::EncoderIntf::ConfigIntf::get_sincos_gpio_pin_sin(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 359: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::EncoderIntf::ConfigIntf::get_sincos_gpio_pin_cos(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 360: { return odrive_encoder_set_linear_count(static_cast<ODriveIntf::EncoderIntf*>(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root))), static_cast<int32_t>((ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))->set_linear_count_in_count_), input_buffer, output_buffer); } break;
        case 361: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODriveIntf::EncoderIntf::get_set_linear_count_in_count_(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 362: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::AcimEstimatorIntf::get_rotor_flux(ODriveIntf::AxisIntf::get_acim_estimator(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 363: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::AcimEstimatorIntf::get_slip_vel(ODriveIntf::AxisIntf::get_acim_estimator(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 364: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::AcimEstimatorIntf::get_phase_offset(ODriveIntf::AxisIntf::get_acim_estimator(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 365: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::AcimEstimatorIntf::get_stator_phase_vel(ODriveIntf::AxisIntf::get_acim_estimator(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 366: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::AcimEstimatorIntf::get_stator_phase(ODriveIntf::AxisIntf::get_acim_estimator(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 367: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AcimEstimatorIntf::ConfigIntf::get_slip_velocity(ODriveIntf::AcimEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_acim_estimator(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 368: { return fibre_property_odrive_sensorless_estimator_error_readwrite_exchange(static_cast<Property<ODriveIntf::SensorlessEstimatorIntf::Error>>(ODriveIntf::SensorlessEstimatorIntf::get_error(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis0(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 369: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::SensorlessEstimatorIntf::get_phase(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 370: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::SensorlessEstimatorIntf::get_pll_pos(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 371: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::SensorlessEstimatorIntf::get_phase_vel(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 372: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::SensorlessEstimatorIntf::get_vel_estimate(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 373: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::SensorlessEstimatorIntf::ConfigIntf::get_observer_gain(ODriveIntf::SensorlessEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 374: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::SensorlessEstimatorIntf::ConfigIntf::get_pll_bandwidth(ODriveIntf::SensorlessEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 375: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::SensorlessEstimatorIntf::ConfigIntf::get_pm_flux_linkage(ODriveIntf::SensorlessEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 376: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::TrapezoidalTrajectoryIntf::ConfigIntf::get_vel_limit(ODriveIntf::TrapezoidalTrajectoryIntf::get_config(ODriveIntf::AxisIntf::get_trap_traj(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 377: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::TrapezoidalTrajectoryIntf::ConfigIntf::get_accel_limit(ODriveIntf::TrapezoidalTrajectoryIntf::get_config(ODriveIntf::AxisIntf::get_trap_traj(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 378: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::TrapezoidalTrajectoryIntf::ConfigIntf::get_decel_limit(ODriveIntf::TrapezoidalTrajectoryIntf::get_config(ODriveIntf::AxisIntf::get_trap_traj(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 379: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::EndstopIntf::get_endstop_state(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 380: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::EndstopIntf::ConfigIntf::get_gpio_num(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 381: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EndstopIntf::ConfigIntf::get_enabled(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 382: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndstopIntf::ConfigIntf::get_offset(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 383: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EndstopIntf::ConfigIntf::get_is_active_high(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 384: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::EndstopIntf::ConfigIntf::get_debounce_ms(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 385: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::EndstopIntf::get_endstop_state(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis0(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 386: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::EndstopIntf::ConfigIntf::get_gpio_num(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 387: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EndstopIntf::ConfigIntf::get_enabled(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 388: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndstopIntf::ConfigIntf::get_offset(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 389: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EndstopIntf::ConfigIntf::get_is_active_high(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 390: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::EndstopIntf::ConfigIntf::get_debounce_ms(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 391: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::MechanicalBrakeIntf::ConfigIntf::get_gpio_num(ODriveIntf::MechanicalBrakeIntf::get_config(ODriveIntf::AxisIntf::get_mechanical_brake(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 392: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::MechanicalBrakeIntf::ConfigIntf::get_is_active_low(ODriveIntf::MechanicalBrakeIntf::get_config(ODriveIntf::AxisIntf::get_mechanical_brake(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 393: { return odrive_mechanical_brake_engage(static_cast<ODriveIntf::MechanicalBrakeIntf*>(ODriveIntf::AxisIntf::get_mechanical_brake(ODrive3Intf::get_axis0(&ep_root))), input_buffer, output_buffer); } break;
        case 394: { return odrive_mechanical_brake_release(static_cast<ODriveIntf::MechanicalBrakeIntf*>(ODriveIntf::AxisIntf::get_mechanical_brake(ODrive3Intf::get_axis0(&ep_root))), input_buffer, output_buffer); } break;
        case 395: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_thermistor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 396: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_thermistor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 397: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_thermistor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 398: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_thermistor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 399: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_encoder_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 400: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_encoder_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 401: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_encoder_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 402: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_encoder_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 403: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_sensorless_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 404: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_sensorless_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 405: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_sensorless_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 406: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_sensorless_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 407: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_endstop_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 408: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_endstop_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 409: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_endstop_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 410: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_endstop_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 411: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_can_heartbeat(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 412: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_can_heartbeat(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 413: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_can_heartbeat(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 414: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_can_heartbeat(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 415: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 416: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 417: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 418: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 419: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_open_loop_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 420: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_open_loop_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 421: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_open_loop_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 422: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_open_loop_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 423: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_acim_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 424: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_acim_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 425: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_acim_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 426: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_acim_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 427: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_motor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 428: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_motor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 429: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_motor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 430: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_motor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 431: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 432: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 433: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 434: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 435: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_dc_calib(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 436: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_dc_calib(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 437: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_dc_calib(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 438: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_dc_calib(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 439: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_sense(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 440: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_sense(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 441: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_sense(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 442: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_sense(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 443: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_pwm_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 444: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_pwm_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 445: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_pwm_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 446: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_pwm_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis0(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 447: { return odrive_axis_watchdog_feed(static_cast<ODriveIntf::AxisIntf*>(ODrive3Intf::get_axis0(&ep_root)), input_buffer, output_buffer); } break;
        case 448: { return fibre_property_odrive_axis_error_readwrite_exchange(static_cast<Property<ODriveIntf::AxisIntf::Error>>(ODriveIntf::AxisIntf::get_error(ODrive3Intf::get_axis1(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 449: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::AxisIntf::get_step_dir_active(ODrive3Intf::get_axis1(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 450: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::AxisIntf::get_last_drv_fault(ODrive3Intf::get_axis1(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 451: { return fibre_property_int64_readonly_read(static_cast<Property<const int64_t>>(ODriveIntf::AxisIntf::get_steps(ODrive3Intf::get_axis1(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 452: { return fibre_property_odrive_axis_axis_state_readonly_read(static_cast<Property<const ODriveIntf::AxisIntf::AxisState>>(ODriveIntf::AxisIntf::get_current_state(ODrive3Intf::get_axis1(&ep_root))), nullptr, input_buffer, output_buffer); } break;
        case 453: { return fibre_property_odrive_axis_axis_state_readwrite_exchange(static_cast<Property<ODriveIntf::AxisIntf::AxisState>>(ODriveIntf::AxisIntf::get_requested_state(ODrive3Intf::get_axis1(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 454: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::get_is_homed(ODrive3Intf::get_axis1(&ep_root))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 455: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_startup_motor_calibration(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 456: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_startup_encoder_index_search(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 457: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_startup_encoder_offset_calibration(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 458: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_startup_closed_loop_control(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 459: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_startup_homing(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 460: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_enable_step_dir(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 461: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_step_dir_always_on(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 462: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_enable_sensorless_mode(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 463: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::ConfigIntf::get_watchdog_timeout(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 464: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::ConfigIntf::get_enable_watchdog(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 465: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::AxisIntf::ConfigIntf::get_step_gpio_pin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 466: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::AxisIntf::ConfigIntf::get_dir_gpio_pin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 467: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_current(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 468: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_ramp_time(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 469: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_ramp_distance(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 470: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_accel(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 471: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::ConfigIntf::CalibrationLockinIntf::get_vel(ODriveIntf::AxisIntf::ConfigIntf::get_calibration_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 472: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_current(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 473: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_time(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 474: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_distance(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 475: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_accel(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 476: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_vel(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 477: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_distance(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 478: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_vel(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 479: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_distance(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 480: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_enc_idx(ODriveIntf::AxisIntf::ConfigIntf::get_sensorless_ramp(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 481: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_current(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 482: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_time(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 483: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_ramp_distance(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 484: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_accel(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 485: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_vel(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 486: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_distance(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 487: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_vel(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 488: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_distance(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 489: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::LockinConfigIntf::get_finish_on_enc_idx(ODriveIntf::AxisIntf::ConfigIntf::get_general_lockin(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 490: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_node_id(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 491: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::AxisIntf::CanConfigIntf::get_is_extended(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 492: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_heartbeat_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 493: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_encoder_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 494: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_motor_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 495: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_encoder_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 496: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_controller_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 497: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_sensorless_error_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 498: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_encoder_count_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 499: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_iq_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 500: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_sensorless_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 501: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::AxisIntf::CanConfigIntf::get_bus_vi_rate_ms(ODriveIntf::AxisIntf::ConfigIntf::get_can(ODriveIntf::AxisIntf::get_config(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 502: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::get_last_error_time(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 503: { return fibre_property_odrive_motor_error_readwrite_exchange(static_cast<Property<ODriveIntf::MotorIntf::Error>>(ODriveIntf::MotorIntf::get_error(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 504: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::MotorIntf::get_is_armed(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 505: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::MotorIntf::get_is_calibrated(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 506: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::get_current_meas_phA(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 507: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::get_current_meas_phB(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 508: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::get_current_meas_phC(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 509: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::get_DC_calib_phA(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 510: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::get_DC_calib_phB(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 511: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::get_DC_calib_phC(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 512: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::get_I_bus(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 513: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::get_phase_current_rev_gain(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 514: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::get_effective_current_lim(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 515: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::get_max_allowed_current(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 516: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::get_max_dc_calib(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 517: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::OnboardThermistorCurrentLimiterIntf::get_temperature(ODriveIntf::MotorIntf::get_fet_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 518: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OnboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_lower(ODriveIntf::OnboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_fet_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 519: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OnboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_upper(ODriveIntf::OnboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_fet_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 520: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::OnboardThermistorCurrentLimiterIntf::ConfigIntf::get_enabled(ODriveIntf::OnboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_fet_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 521: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_temperature(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 522: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_gpio_pin(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 523: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_0(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 524: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_1(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 525: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_2(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 526: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_poly_coefficient_3(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 527: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_lower(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 528: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_temp_limit_upper(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 529: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::OffboardThermistorCurrentLimiterIntf::ConfigIntf::get_enabled(ODriveIntf::OffboardThermistorCurrentLimiterIntf::get_config(ODriveIntf::MotorIntf::get_motor_thermistor(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 530: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_p_gain(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 531: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_i_gain(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 532: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_I_measured_report_filter_k(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 533: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Id_setpoint(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 534: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Iq_setpoint(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 535: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Vd_setpoint(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 536: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Vq_setpoint(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 537: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_phase(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 538: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_phase_vel(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 539: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Ialpha_measured(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 540: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Ibeta_measured(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 541: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Id_measured(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 542: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_Iq_measured(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 543: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_power(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 544: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_v_current_control_integral_d(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 545: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_v_current_control_integral_q(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 546: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_final_v_alpha(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 547: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::MotorIntf::CurrentControlIntf::get_final_v_beta(ODriveIntf::MotorIntf::get_current_control(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 548: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::MotorIntf::get_n_evt_current_measurement(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 549: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::MotorIntf::get_n_evt_pwm_update(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 550: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::MotorIntf::ConfigIntf::get_pre_calibrated(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 551: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODriveIntf::MotorIntf::ConfigIntf::get_pole_pairs(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 552: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_calibration_current(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 553: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_resistance_calib_max_voltage(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 554: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_phase_inductance(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 555: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_phase_resistance(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 556: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_torque_constant(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 557: { return fibre_property_odrive_motor_motor_type_readwrite_exchange(static_cast<Property<ODriveIntf::MotorIntf::MotorType>>(ODriveIntf::MotorIntf::ConfigIntf::get_motor_type(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 558: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_current_lim(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 559: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_current_lim_margin(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 560: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_torque_lim(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 561: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_inverter_temp_limit_lower(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 562: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_inverter_temp_limit_upper(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 563: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_requested_current_range(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 564: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_current_control_bandwidth(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 565: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_acim_gain_min_flux(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 566: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_min_Id(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 567: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_enable(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 568: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_attack_gain(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 569: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_acim_autoflux_decay_gain(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 570: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::MotorIntf::ConfigIntf::get_R_wL_FF_enable(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 571: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::MotorIntf::ConfigIntf::get_bEMF_FF_enable(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 572: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_I_bus_hard_min(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 573: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_I_bus_hard_max(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 574: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_I_leak_max(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 575: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::MotorIntf::ConfigIntf::get_dc_calib_tau(ODriveIntf::MotorIntf::get_config(ODriveIntf::AxisIntf::get_motor(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 576: { return fibre_property_odrive_controller_error_readwrite_exchange(static_cast<Property<ODriveIntf::ControllerIntf::Error>>(ODriveIntf::ControllerIntf::get_error(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 577: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::get_last_error_time(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 578: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::get_input_pos(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 579: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::get_input_vel(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 580: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::get_input_torque(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 581: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::get_pos_setpoint(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 582: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::get_vel_setpoint(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 583: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::get_torque_setpoint(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 584: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::ControllerIntf::get_trajectory_done(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 585: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::get_vel_integrator_torque(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 586: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::get_anticogging_valid(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 587: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::get_autotuning_phase(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 588: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_gain_scheduling_width(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 589: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::ConfigIntf::get_enable_vel_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 590: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::ConfigIntf::get_enable_torque_mode_vel_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 591: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::ConfigIntf::get_enable_gain_scheduling(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 592: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::ConfigIntf::get_enable_overspeed_error(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 593: { return fibre_property_odrive_controller_control_mode_readwrite_exchange(static_cast<Property<ODriveIntf::ControllerIntf::ControlMode>>(ODriveIntf::ControllerIntf::ConfigIntf::get_control_mode(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 594: { return fibre_property_odrive_controller_input_mode_readwrite_exchange(static_cast<Property<ODriveIntf::ControllerIntf::InputMode>>(ODriveIntf::ControllerIntf::ConfigIntf::get_input_mode(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 595: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_pos_gain(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 596: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_vel_gain(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 597: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_vel_integrator_gain(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 598: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_vel_integrator_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 599: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_vel_limit(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 600: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_vel_limit_tolerance(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 601: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_vel_ramp_rate(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 602: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_torque_ramp_rate(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 603: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::ConfigIntf::get_circular_setpoints(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 604: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_circular_setpoint_range(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 605: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODriveIntf::ControllerIntf::ConfigIntf::get_steps_per_circular_range(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 606: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_homing_speed(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 607: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_inertia(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 608: { return fibre_property_uint8_readwrite_exchange(static_cast<Property<uint8_t>>(ODriveIntf::ControllerIntf::ConfigIntf::get_axis_to_mirror(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 609: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_mirror_ratio(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 610: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_torque_mirror_ratio(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 611: { return fibre_property_uint8_readwrite_exchange(static_cast<Property<uint8_t>>(ODriveIntf::ControllerIntf::ConfigIntf::get_load_encoder_axis(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 612: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_input_filter_bandwidth(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 613: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_index(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))))), nullptr, input_buffer, output_buffer); } break;
        case 614: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_pre_calibrated(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 615: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_calib_anticogging(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))))), nullptr, input_buffer, output_buffer); } break;
        case 616: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_calib_pos_threshold(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 617: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_calib_vel_threshold(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 618: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_cogging_ratio(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))))), nullptr, input_buffer, output_buffer); } break;
        case 619: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::ConfigIntf::AnticoggingIntf::get_anticogging_enabled(ODriveIntf::ControllerIntf::ConfigIntf::get_anticogging(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 620: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_mechanical_power_bandwidth(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 621: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_electrical_power_bandwidth(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 622: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_spinout_mechanical_power_threshold(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 623: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::ConfigIntf::get_spinout_electrical_power_threshold(ODriveIntf::ControllerIntf::get_config(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 624: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::AutotuningIntf::get_frequency(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 625: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::AutotuningIntf::get_pos_amplitude(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 626: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::AutotuningIntf::get_vel_amplitude(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 627: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::AutotuningIntf::get_torque_amplitude(ODriveIntf::ControllerIntf::get_autotuning(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 628: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::get_mechanical_power(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 629: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::get_electrical_power(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 630: { return odrive_controller_move_incremental(static_cast<ODriveIntf::ControllerIntf*>(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), static_cast<float>((ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))->move_incremental_in_displacement_), static_cast<bool>((ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))->move_incremental_in_from_input_pos_), input_buffer, output_buffer); } break;
        case 631: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::ControllerIntf::get_move_incremental_in_displacement_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 632: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::ControllerIntf::get_move_incremental_in_from_input_pos_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 633: { return odrive_controller_start_anticogging_calibration(static_cast<ODriveIntf::ControllerIntf*>(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), input_buffer, output_buffer); } break;
        case 634: { return odrive_controller_remove_anticogging_bias(static_cast<ODriveIntf::ControllerIntf*>(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), static_cast<float*>(&(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))->remove_anticogging_bias_out_val_), input_buffer, output_buffer); } break;
        case 635: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::get_remove_anticogging_bias_out_val_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 636: { return odrive_controller_get_anticogging_value(static_cast<ODriveIntf::ControllerIntf*>(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root))), static_cast<uint32_t>((ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))->get_anticogging_value_in_index_), static_cast<float*>(&(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))->get_anticogging_value_out_val_), input_buffer, output_buffer); } break;
        case 637: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::ControllerIntf::get_get_anticogging_value_in_index_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 638: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::ControllerIntf::get_get_anticogging_value_out_val_(ODriveIntf::AxisIntf::get_controller(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 639: { return fibre_property_odrive_encoder_error_readwrite_exchange(static_cast<Property<ODriveIntf::EncoderIntf::Error>>(ODriveIntf::EncoderIntf::get_error(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 640: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::EncoderIntf::get_is_ready(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 641: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::EncoderIntf::get_index_found(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 642: { return fibre_property_int32_readonly_read(static_cast<Property<const int32_t>>(ODriveIntf::EncoderIntf::get_shadow_count(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 643: { return fibre_property_int32_readonly_read(static_cast<Property<const int32_t>>(ODriveIntf::EncoderIntf::get_count_in_cpr(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 644: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_interpolation(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 645: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_phase(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 646: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_pos_estimate(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 647: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_pos_estimate_counts(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 648: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_pos_circular(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 649: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_pos_cpr_counts(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 650: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_delta_pos_cpr_counts(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 651: { return fibre_property_uint8_readonly_read(static_cast<Property<const uint8_t>>(ODriveIntf::EncoderIntf::get_hall_state(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 652: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_vel_estimate(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 653: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_vel_estimate_counts(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 654: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_calib_scan_response(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 655: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODriveIntf::EncoderIntf::get_pos_abs(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 656: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::EncoderIntf::get_spi_error_rate(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 657: { return fibre_property_odrive_encoder_mode_readwrite_exchange(static_cast<Property<ODriveIntf::EncoderIntf::Mode>>(ODriveIntf::EncoderIntf::ConfigIntf::get_mode(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 658: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EncoderIntf::ConfigIntf::get_use_index(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 659: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EncoderIntf::ConfigIntf::get_index_offset(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 660: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EncoderIntf::ConfigIntf::get_use_index_offset(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 661: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EncoderIntf::ConfigIntf::get_find_idx_on_lockin_only(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 662: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::EncoderIntf::ConfigIntf::get_abs_spi_cs_gpio_pin(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 663: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODriveIntf::EncoderIntf::ConfigIntf::get_cpr(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 664: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODriveIntf::EncoderIntf::ConfigIntf::get_phase_offset(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 665: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EncoderIntf::ConfigIntf::get_phase_offset_float(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 666: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODriveIntf::EncoderIntf::ConfigIntf::get_direction(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 667: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EncoderIntf::ConfigIntf::get_pre_calibrated(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 668: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EncoderIntf::ConfigIntf::get_enable_phase_interpolation(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 669: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EncoderIntf::ConfigIntf::get_bandwidth(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 670: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EncoderIntf::ConfigIntf::get_calib_range(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 671: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EncoderIntf::ConfigIntf::get_calib_scan_distance(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 672: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EncoderIntf::ConfigIntf::get_calib_scan_omega(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 673: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EncoderIntf::ConfigIntf::get_ignore_illegal_hall_state(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 674: { return fibre_property_uint8_readwrite_exchange(static_cast<Property<uint8_t>>(ODriveIntf::EncoderIntf::ConfigIntf::get_hall_polarity(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 675: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EncoderIntf::ConfigIntf::get_hall_polarity_calibrated(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 676: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::EncoderIntf::ConfigIntf::get_sincos_gpio_pin_sin(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 677: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::EncoderIntf::ConfigIntf::get_sincos_gpio_pin_cos(ODriveIntf::EncoderIntf::get_config(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 678: { return odrive_encoder_set_linear_count(static_cast<ODriveIntf::EncoderIntf*>(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root))), static_cast<int32_t>((ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))->set_linear_count_in_count_), input_buffer, output_buffer); } break;
        case 679: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODriveIntf::EncoderIntf::get_set_linear_count_in_count_(ODriveIntf::AxisIntf::get_encoder(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 680: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::AcimEstimatorIntf::get_rotor_flux(ODriveIntf::AxisIntf::get_acim_estimator(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 681: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::AcimEstimatorIntf::get_slip_vel(ODriveIntf::AxisIntf::get_acim_estimator(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 682: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::AcimEstimatorIntf::get_phase_offset(ODriveIntf::AxisIntf::get_acim_estimator(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 683: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::AcimEstimatorIntf::get_stator_phase_vel(ODriveIntf::AxisIntf::get_acim_estimator(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 684: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::AcimEstimatorIntf::get_stator_phase(ODriveIntf::AxisIntf::get_acim_estimator(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 685: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::AcimEstimatorIntf::ConfigIntf::get_slip_velocity(ODriveIntf::AcimEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_acim_estimator(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 686: { return fibre_property_odrive_sensorless_estimator_error_readwrite_exchange(static_cast<Property<ODriveIntf::SensorlessEstimatorIntf::Error>>(ODriveIntf::SensorlessEstimatorIntf::get_error(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis1(&ep_root)))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 687: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::SensorlessEstimatorIntf::get_phase(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 688: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::SensorlessEstimatorIntf::get_pll_pos(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 689: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::SensorlessEstimatorIntf::get_phase_vel(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 690: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODriveIntf::SensorlessEstimatorIntf::get_vel_estimate(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 691: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::SensorlessEstimatorIntf::ConfigIntf::get_observer_gain(ODriveIntf::SensorlessEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 692: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::SensorlessEstimatorIntf::ConfigIntf::get_pll_bandwidth(ODriveIntf::SensorlessEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 693: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::SensorlessEstimatorIntf::ConfigIntf::get_pm_flux_linkage(ODriveIntf::SensorlessEstimatorIntf::get_config(ODriveIntf::AxisIntf::get_sensorless_estimator(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 694: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::TrapezoidalTrajectoryIntf::ConfigIntf::get_vel_limit(ODriveIntf::TrapezoidalTrajectoryIntf::get_config(ODriveIntf::AxisIntf::get_trap_traj(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 695: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::TrapezoidalTrajectoryIntf::ConfigIntf::get_accel_limit(ODriveIntf::TrapezoidalTrajectoryIntf::get_config(ODriveIntf::AxisIntf::get_trap_traj(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 696: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::TrapezoidalTrajectoryIntf::ConfigIntf::get_decel_limit(ODriveIntf::TrapezoidalTrajectoryIntf::get_config(ODriveIntf::AxisIntf::get_trap_traj(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 697: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::EndstopIntf::get_endstop_state(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 698: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::EndstopIntf::ConfigIntf::get_gpio_num(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 699: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EndstopIntf::ConfigIntf::get_enabled(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 700: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndstopIntf::ConfigIntf::get_offset(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 701: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EndstopIntf::ConfigIntf::get_is_active_high(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 702: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::EndstopIntf::ConfigIntf::get_debounce_ms(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_min_endstop(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 703: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODriveIntf::EndstopIntf::get_endstop_state(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis1(&ep_root)))), nullptr, input_buffer, output_buffer); } break;
        case 704: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::EndstopIntf::ConfigIntf::get_gpio_num(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 705: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EndstopIntf::ConfigIntf::get_enabled(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 706: { return fibre_property_float32_readwrite_exchange(static_cast<Property<float>>(ODriveIntf::EndstopIntf::ConfigIntf::get_offset(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 707: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::EndstopIntf::ConfigIntf::get_is_active_high(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 708: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::EndstopIntf::ConfigIntf::get_debounce_ms(ODriveIntf::EndstopIntf::get_config(ODriveIntf::AxisIntf::get_max_endstop(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 709: { return fibre_property_uint16_readwrite_exchange(static_cast<Property<uint16_t>>(ODriveIntf::MechanicalBrakeIntf::ConfigIntf::get_gpio_num(ODriveIntf::MechanicalBrakeIntf::get_config(ODriveIntf::AxisIntf::get_mechanical_brake(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 710: { return fibre_property_bool_readwrite_exchange(static_cast<Property<bool>>(ODriveIntf::MechanicalBrakeIntf::ConfigIntf::get_is_active_low(ODriveIntf::MechanicalBrakeIntf::get_config(ODriveIntf::AxisIntf::get_mechanical_brake(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 711: { return odrive_mechanical_brake_engage(static_cast<ODriveIntf::MechanicalBrakeIntf*>(ODriveIntf::AxisIntf::get_mechanical_brake(ODrive3Intf::get_axis1(&ep_root))), input_buffer, output_buffer); } break;
        case 712: { return odrive_mechanical_brake_release(static_cast<ODriveIntf::MechanicalBrakeIntf*>(ODriveIntf::AxisIntf::get_mechanical_brake(ODrive3Intf::get_axis1(&ep_root))), input_buffer, output_buffer); } break;
        case 713: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_thermistor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 714: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_thermistor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 715: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_thermistor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 716: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_thermistor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 717: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_encoder_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 718: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_encoder_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 719: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_encoder_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 720: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_encoder_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 721: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_sensorless_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 722: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_sensorless_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 723: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_sensorless_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 724: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_sensorless_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 725: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_endstop_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 726: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_endstop_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 727: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_endstop_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 728: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_endstop_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 729: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_can_heartbeat(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 730: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_can_heartbeat(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 731: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_can_heartbeat(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 732: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_can_heartbeat(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 733: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 734: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 735: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 736: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 737: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_open_loop_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 738: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_open_loop_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 739: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_open_loop_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 740: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_open_loop_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 741: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_acim_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 742: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_acim_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 743: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_acim_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 744: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_acim_estimator_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 745: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_motor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 746: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_motor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 747: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_motor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 748: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_motor_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 749: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 750: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 751: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 752: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_controller_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 753: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_dc_calib(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 754: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_dc_calib(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 755: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_dc_calib(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 756: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_dc_calib(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 757: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_sense(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 758: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_sense(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 759: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_sense(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 760: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_current_sense(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 761: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_start_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_pwm_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 762: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_end_time(ODriveIntf::AxisIntf::TaskTimesIntf::get_pwm_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 763: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODriveIntf::TaskTimerIntf::get_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_pwm_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), nullptr, input_buffer, output_buffer); } break;
        case 764: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODriveIntf::TaskTimerIntf::get_max_length(ODriveIntf::AxisIntf::TaskTimesIntf::get_pwm_update(ODriveIntf::AxisIntf::get_task_times(ODrive3Intf::get_axis1(&ep_root))))), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 765: { return odrive_axis_watchdog_feed(static_cast<ODriveIntf::AxisIntf*>(ODrive3Intf::get_axis1(&ep_root)), input_buffer, output_buffer); } break;
        case 766: { return odrive_test_function(static_cast<ODriveIntf*>(&ep_root), static_cast<int32_t>((&ep_root)->test_function_in_delta_), static_cast<int32_t*>(&(&ep_root)->test_function_out_cnt_), input_buffer, output_buffer); } break;
        case 767: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODrive3Intf::get_test_function_in_delta_(&ep_root)), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 768: { return fibre_property_int32_readonly_read(static_cast<Property<const int32_t>>(ODrive3Intf::get_test_function_out_cnt_(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 769: { return odrive_get_adc_voltage(static_cast<ODriveIntf*>(&ep_root), static_cast<uint32_t>((&ep_root)->get_adc_voltage_in_gpio_), static_cast<float*>(&(&ep_root)->get_adc_voltage_out_voltage_), input_buffer, output_buffer); } break;
        case 770: { return fibre_property_uint32_readwrite_exchange(static_cast<Property<uint32_t>>(ODrive3Intf::get_get_adc_voltage_in_gpio_(&ep_root)), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 771: { return fibre_property_float32_readonly_read(static_cast<Property<const float>>(ODrive3Intf::get_get_adc_voltage_out_voltage_(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 772: { return odrive_save_configuration(static_cast<ODriveIntf*>(&ep_root), static_cast<bool*>(&(&ep_root)->save_configuration_out_success_), input_buffer, output_buffer); } break;
        case 773: { return fibre_property_bool_readonly_read(static_cast<Property<const bool>>(ODrive3Intf::get_save_configuration_out_success_(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 774: { return odrive_erase_configuration(static_cast<ODriveIntf*>(&ep_root), input_buffer, output_buffer); } break;
        case 775: { return odrive_reboot(static_cast<ODriveIntf*>(&ep_root), input_buffer, output_buffer); } break;
        case 776: { return odrive_enter_dfu_mode(static_cast<ODriveIntf*>(&ep_root), input_buffer, output_buffer); } break;
        case 777: { return odrive_get_interrupt_status(static_cast<ODriveIntf*>(&ep_root), static_cast<int32_t>((&ep_root)->get_interrupt_status_in_irqn_), static_cast<uint32_t*>(&(&ep_root)->get_interrupt_status_out_status_), input_buffer, output_buffer); } break;
        case 778: { return fibre_property_int32_readwrite_exchange(static_cast<Property<int32_t>>(ODrive3Intf::get_get_interrupt_status_in_irqn_(&ep_root)), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 779: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODrive3Intf::get_get_interrupt_status_out_status_(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 780: { return odrive_get_dma_status(static_cast<ODriveIntf*>(&ep_root), static_cast<uint8_t>((&ep_root)->get_dma_status_in_stream_num_), static_cast<uint32_t*>(&(&ep_root)->get_dma_status_out_status_), input_buffer, output_buffer); } break;
        case 781: { return fibre_property_uint8_readwrite_exchange(static_cast<Property<uint8_t>>(ODrive3Intf::get_get_dma_status_in_stream_num_(&ep_root)), std::nullopt, nullptr, input_buffer, output_buffer); } break;
        case 782: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODrive3Intf::get_get_dma_status_out_status_(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 783: { return odrive_get_gpio_states(static_cast<ODriveIntf*>(&ep_root), static_cast<uint32_t*>(&(&ep_root)->get_gpio_states_out_status_), input_buffer, output_buffer); } break;
        case 784: { return fibre_property_uint32_readonly_read(static_cast<Property<const uint32_t>>(ODrive3Intf::get_get_gpio_states_out_status_(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 785: { return odrive_get_drv_fault(static_cast<ODriveIntf*>(&ep_root), static_cast<uint64_t*>(&(&ep_root)->get_drv_fault_out_drv_fault_), input_buffer, output_buffer); } break;
        case 786: { return fibre_property_uint64_readonly_read(static_cast<Property<const uint64_t>>(ODrive3Intf::get_get_drv_fault_out_drv_fault_(&ep_root)), nullptr, input_buffer, output_buffer); } break;
        case 787: { return odrive_clear_errors(static_cast<ODriveIntf*>(&ep_root), input_buffer, output_buffer); } break;
        default: return false;
    }
}

bool is_endpoint_ref_valid(endpoint_ref_t endpoint_ref) {
    if (endpoint_ref.json_crc != json_crc_) {
        return false;
    }

    switch (endpoint_ref.endpoint_id) {
        case 0: return true;
        case 1: return true;
        case 2: return true;
        case 3: return true;
        case 4: return true;
        case 5: return true;
        case 6: return true;
        case 7: return true;
        case 8: return true;
        case 9: return true;
        case 10: return true;
        case 11: return true;
        case 12: return true;
        case 13: return true;
        case 14: return true;
        case 15: return true;
        case 16: return true;
        case 17: return true;
        case 18: return true;
        case 19: return true;
        case 20: return true;
        case 21: return true;
        case 22: return true;
        case 23: return true;
        case 24: return true;
        case 25: return true;
        case 26: return true;
        case 27: return true;
        case 28: return true;
        case 29: return true;
        case 30: return true;
        case 31: return true;
        case 32: return true;
        case 33: return true;
        case 34: return true;
        case 35: return true;
        case 36: return true;
        case 37: return true;
        case 38: return true;
        case 39: return true;
        case 40: return true;
        case 41: return true;
        case 42: return true;
        case 43: return true;
        case 44: return true;
        case 45: return true;
        case 46: return true;
        case 47: return true;
        case 48: return true;
        case 49: return true;
        case 50: return true;
        case 51: return true;
        case 52: return true;
        case 53: return true;
        case 54: return true;
        case 55: return true;
        case 56: return true;
        case 57: return true;
        case 58: return true;
        case 59: return true;
        case 60: return true;
        case 61: return true;
        case 62: return true;
        case 63: return true;
        case 64: return true;
        case 65: return true;
        case 66: return true;
        case 67: return true;
        case 68: return true;
        case 69: return true;
        case 70: return true;
        case 71: return true;
        case 72: return true;
        case 73: return true;
        case 74: return true;
        case 75: return true;
        case 76: return true;
        case 77: return true;
        case 78: return true;
        case 79: return true;
        case 80: return true;
        case 81: return true;
        case 82: return true;
        case 83: return true;
        case 84: return true;
        case 85: return true;
        case 86: return true;
        case 87: return true;
        case 88: return true;
        case 89: return true;
        case 90: return true;
        case 91: return true;
        case 92: return true;
        case 93: return true;
        case 94: return true;
        case 95: return true;
        case 96: return true;
        case 97: return true;
        case 98: return true;
        case 99: return true;
        case 100: return true;
        case 101: return true;
        case 102: return true;
        case 103: return true;
        case 104: return true;
        case 105: return true;
        case 106: return true;
        case 107: return true;
        case 108: return true;
        case 109: return true;
        case 110: return true;
        case 111: return true;
        case 112: return true;
        case 113: return true;
        case 114: return true;
        case 115: return true;
        case 116: return true;
        case 117: return true;
        case 118: return true;
        case 119: return true;
        case 120: return true;
        case 121: return true;
        case 122: return true;
        case 123: return true;
        case 124: return true;
        case 125: return true;
        case 126: return true;
        case 127: return true;
        case 128: return true;
        case 129: return true;
        case 130: return true;
        case 131: return true;
        case 132: return true;
        case 133: return true;
        case 134: return true;
        case 135: return true;
        case 136: return true;
        case 137: return true;
        case 138: return true;
        case 139: return true;
        case 140: return true;
        case 141: return true;
        case 142: return true;
        case 143: return true;
        case 144: return true;
        case 145: return true;
        case 146: return true;
        case 147: return true;
        case 148: return true;
        case 149: return true;
        case 150: return true;
        case 151: return true;
        case 152: return true;
        case 153: return true;
        case 154: return true;
        case 155: return true;
        case 156: return true;
        case 157: return true;
        case 158: return true;
        case 159: return true;
        case 160: return true;
        case 161: return true;
        case 162: return true;
        case 163: return true;
        case 164: return true;
        case 165: return true;
        case 166: return true;
        case 167: return true;
        case 168: return true;
        case 169: return true;
        case 170: return true;
        case 171: return true;
        case 172: return true;
        case 173: return true;
        case 174: return true;
        case 175: return true;
        case 176: return true;
        case 177: return true;
        case 178: return true;
        case 179: return true;
        case 180: return true;
        case 181: return true;
        case 182: return true;
        case 183: return true;
        case 184: return true;
        case 185: return true;
        case 186: return true;
        case 187: return true;
        case 188: return true;
        case 189: return true;
        case 190: return true;
        case 191: return true;
        case 192: return true;
        case 193: return true;
        case 194: return true;
        case 195: return true;
        case 196: return true;
        case 197: return true;
        case 198: return true;
        case 199: return true;
        case 200: return true;
        case 201: return true;
        case 202: return true;
        case 203: return true;
        case 204: return true;
        case 205: return true;
        case 206: return true;
        case 207: return true;
        case 208: return true;
        case 209: return true;
        case 210: return true;
        case 211: return true;
        case 212: return true;
        case 213: return true;
        case 214: return true;
        case 215: return true;
        case 216: return true;
        case 217: return true;
        case 218: return true;
        case 219: return true;
        case 220: return true;
        case 221: return true;
        case 222: return true;
        case 223: return true;
        case 224: return true;
        case 225: return true;
        case 226: return true;
        case 227: return true;
        case 228: return true;
        case 229: return true;
        case 230: return true;
        case 231: return true;
        case 232: return true;
        case 233: return true;
        case 234: return true;
        case 235: return true;
        case 236: return true;
        case 237: return true;
        case 238: return true;
        case 239: return true;
        case 240: return true;
        case 241: return true;
        case 242: return true;
        case 243: return true;
        case 244: return true;
        case 245: return true;
        case 246: return true;
        case 247: return true;
        case 248: return true;
        case 249: return true;
        case 250: return true;
        case 251: return true;
        case 252: return true;
        case 253: return true;
        case 254: return true;
        case 255: return true;
        case 256: return true;
        case 257: return true;
        case 258: return true;
        case 259: return true;
        case 260: return true;
        case 261: return true;
        case 262: return true;
        case 263: return true;
        case 264: return true;
        case 265: return true;
        case 266: return true;
        case 267: return true;
        case 268: return true;
        case 269: return true;
        case 270: return true;
        case 271: return true;
        case 272: return true;
        case 273: return true;
        case 274: return true;
        case 275: return true;
        case 276: return true;
        case 277: return true;
        case 278: return true;
        case 279: return true;
        case 280: return true;
        case 281: return true;
        case 282: return true;
        case 283: return true;
        case 284: return true;
        case 285: return true;
        case 286: return true;
        case 287: return true;
        case 288: return true;
        case 289: return true;
        case 290: return true;
        case 291: return true;
        case 292: return true;
        case 293: return true;
        case 294: return true;
        case 295: return true;
        case 296: return true;
        case 297: return true;
        case 298: return true;
        case 299: return true;
        case 300: return true;
        case 301: return true;
        case 302: return true;
        case 303: return true;
        case 304: return true;
        case 305: return true;
        case 306: return true;
        case 307: return true;
        case 308: return true;
        case 309: return true;
        case 310: return true;
        case 311: return true;
        case 312: return true;
        case 313: return true;
        case 314: return true;
        case 315: return true;
        case 316: return true;
        case 317: return true;
        case 318: return true;
        case 319: return true;
        case 320: return true;
        case 321: return true;
        case 322: return true;
        case 323: return true;
        case 324: return true;
        case 325: return true;
        case 326: return true;
        case 327: return true;
        case 328: return true;
        case 329: return true;
        case 330: return true;
        case 331: return true;
        case 332: return true;
        case 333: return true;
        case 334: return true;
        case 335: return true;
        case 336: return true;
        case 337: return true;
        case 338: return true;
        case 339: return true;
        case 340: return true;
        case 341: return true;
        case 342: return true;
        case 343: return true;
        case 344: return true;
        case 345: return true;
        case 346: return true;
        case 347: return true;
        case 348: return true;
        case 349: return true;
        case 350: return true;
        case 351: return true;
        case 352: return true;
        case 353: return true;
        case 354: return true;
        case 355: return true;
        case 356: return true;
        case 357: return true;
        case 358: return true;
        case 359: return true;
        case 360: return true;
        case 361: return true;
        case 362: return true;
        case 363: return true;
        case 364: return true;
        case 365: return true;
        case 366: return true;
        case 367: return true;
        case 368: return true;
        case 369: return true;
        case 370: return true;
        case 371: return true;
        case 372: return true;
        case 373: return true;
        case 374: return true;
        case 375: return true;
        case 376: return true;
        case 377: return true;
        case 378: return true;
        case 379: return true;
        case 380: return true;
        case 381: return true;
        case 382: return true;
        case 383: return true;
        case 384: return true;
        case 385: return true;
        case 386: return true;
        case 387: return true;
        case 388: return true;
        case 389: return true;
        case 390: return true;
        case 391: return true;
        case 392: return true;
        case 393: return true;
        case 394: return true;
        case 395: return true;
        case 396: return true;
        case 397: return true;
        case 398: return true;
        case 399: return true;
        case 400: return true;
        case 401: return true;
        case 402: return true;
        case 403: return true;
        case 404: return true;
        case 405: return true;
        case 406: return true;
        case 407: return true;
        case 408: return true;
        case 409: return true;
        case 410: return true;
        case 411: return true;
        case 412: return true;
        case 413: return true;
        case 414: return true;
        case 415: return true;
        case 416: return true;
        case 417: return true;
        case 418: return true;
        case 419: return true;
        case 420: return true;
        case 421: return true;
        case 422: return true;
        case 423: return true;
        case 424: return true;
        case 425: return true;
        case 426: return true;
        case 427: return true;
        case 428: return true;
        case 429: return true;
        case 430: return true;
        case 431: return true;
        case 432: return true;
        case 433: return true;
        case 434: return true;
        case 435: return true;
        case 436: return true;
        case 437: return true;
        case 438: return true;
        case 439: return true;
        case 440: return true;
        case 441: return true;
        case 442: return true;
        case 443: return true;
        case 444: return true;
        case 445: return true;
        case 446: return true;
        case 447: return true;
        case 448: return true;
        case 449: return true;
        case 450: return true;
        case 451: return true;
        case 452: return true;
        case 453: return true;
        case 454: return true;
        case 455: return true;
        case 456: return true;
        case 457: return true;
        case 458: return true;
        case 459: return true;
        case 460: return true;
        case 461: return true;
        case 462: return true;
        case 463: return true;
        case 464: return true;
        case 465: return true;
        case 466: return true;
        case 467: return true;
        case 468: return true;
        case 469: return true;
        case 470: return true;
        case 471: return true;
        case 472: return true;
        case 473: return true;
        case 474: return true;
        case 475: return true;
        case 476: return true;
        case 477: return true;
        case 478: return true;
        case 479: return true;
        case 480: return true;
        case 481: return true;
        case 482: return true;
        case 483: return true;
        case 484: return true;
        case 485: return true;
        case 486: return true;
        case 487: return true;
        case 488: return true;
        case 489: return true;
        case 490: return true;
        case 491: return true;
        case 492: return true;
        case 493: return true;
        case 494: return true;
        case 495: return true;
        case 496: return true;
        case 497: return true;
        case 498: return true;
        case 499: return true;
        case 500: return true;
        case 501: return true;
        case 502: return true;
        case 503: return true;
        case 504: return true;
        case 505: return true;
        case 506: return true;
        case 507: return true;
        case 508: return true;
        case 509: return true;
        case 510: return true;
        case 511: return true;
        case 512: return true;
        case 513: return true;
        case 514: return true;
        case 515: return true;
        case 516: return true;
        case 517: return true;
        case 518: return true;
        case 519: return true;
        case 520: return true;
        case 521: return true;
        case 522: return true;
        case 523: return true;
        case 524: return true;
        case 525: return true;
        case 526: return true;
        case 527: return true;
        case 528: return true;
        case 529: return true;
        case 530: return true;
        case 531: return true;
        case 532: return true;
        case 533: return true;
        case 534: return true;
        case 535: return true;
        case 536: return true;
        case 537: return true;
        case 538: return true;
        case 539: return true;
        case 540: return true;
        case 541: return true;
        case 542: return true;
        case 543: return true;
        case 544: return true;
        case 545: return true;
        case 546: return true;
        case 547: return true;
        case 548: return true;
        case 549: return true;
        case 550: return true;
        case 551: return true;
        case 552: return true;
        case 553: return true;
        case 554: return true;
        case 555: return true;
        case 556: return true;
        case 557: return true;
        case 558: return true;
        case 559: return true;
        case 560: return true;
        case 561: return true;
        case 562: return true;
        case 563: return true;
        case 564: return true;
        case 565: return true;
        case 566: return true;
        case 567: return true;
        case 568: return true;
        case 569: return true;
        case 570: return true;
        case 571: return true;
        case 572: return true;
        case 573: return true;
        case 574: return true;
        case 575: return true;
        case 576: return true;
        case 577: return true;
        case 578: return true;
        case 579: return true;
        case 580: return true;
        case 581: return true;
        case 582: return true;
        case 583: return true;
        case 584: return true;
        case 585: return true;
        case 586: return true;
        case 587: return true;
        case 588: return true;
        case 589: return true;
        case 590: return true;
        case 591: return true;
        case 592: return true;
        case 593: return true;
        case 594: return true;
        case 595: return true;
        case 596: return true;
        case 597: return true;
        case 598: return true;
        case 599: return true;
        case 600: return true;
        case 601: return true;
        case 602: return true;
        case 603: return true;
        case 604: return true;
        case 605: return true;
        case 606: return true;
        case 607: return true;
        case 608: return true;
        case 609: return true;
        case 610: return true;
        case 611: return true;
        case 612: return true;
        case 613: return true;
        case 614: return true;
        case 615: return true;
        case 616: return true;
        case 617: return true;
        case 618: return true;
        case 619: return true;
        case 620: return true;
        case 621: return true;
        case 622: return true;
        case 623: return true;
        case 624: return true;
        case 625: return true;
        case 626: return true;
        case 627: return true;
        case 628: return true;
        case 629: return true;
        case 630: return true;
        case 631: return true;
        case 632: return true;
        case 633: return true;
        case 634: return true;
        case 635: return true;
        case 636: return true;
        case 637: return true;
        case 638: return true;
        case 639: return true;
        case 640: return true;
        case 641: return true;
        case 642: return true;
        case 643: return true;
        case 644: return true;
        case 645: return true;
        case 646: return true;
        case 647: return true;
        case 648: return true;
        case 649: return true;
        case 650: return true;
        case 651: return true;
        case 652: return true;
        case 653: return true;
        case 654: return true;
        case 655: return true;
        case 656: return true;
        case 657: return true;
        case 658: return true;
        case 659: return true;
        case 660: return true;
        case 661: return true;
        case 662: return true;
        case 663: return true;
        case 664: return true;
        case 665: return true;
        case 666: return true;
        case 667: return true;
        case 668: return true;
        case 669: return true;
        case 670: return true;
        case 671: return true;
        case 672: return true;
        case 673: return true;
        case 674: return true;
        case 675: return true;
        case 676: return true;
        case 677: return true;
        case 678: return true;
        case 679: return true;
        case 680: return true;
        case 681: return true;
        case 682: return true;
        case 683: return true;
        case 684: return true;
        case 685: return true;
        case 686: return true;
        case 687: return true;
        case 688: return true;
        case 689: return true;
        case 690: return true;
        case 691: return true;
        case 692: return true;
        case 693: return true;
        case 694: return true;
        case 695: return true;
        case 696: return true;
        case 697: return true;
        case 698: return true;
        case 699: return true;
        case 700: return true;
        case 701: return true;
        case 702: return true;
        case 703: return true;
        case 704: return true;
        case 705: return true;
        case 706: return true;
        case 707: return true;
        case 708: return true;
        case 709: return true;
        case 710: return true;
        case 711: return true;
        case 712: return true;
        case 713: return true;
        case 714: return true;
        case 715: return true;
        case 716: return true;
        case 717: return true;
        case 718: return true;
        case 719: return true;
        case 720: return true;
        case 721: return true;
        case 722: return true;
        case 723: return true;
        case 724: return true;
        case 725: return true;
        case 726: return true;
        case 727: return true;
        case 728: return true;
        case 729: return true;
        case 730: return true;
        case 731: return true;
        case 732: return true;
        case 733: return true;
        case 734: return true;
        case 735: return true;
        case 736: return true;
        case 737: return true;
        case 738: return true;
        case 739: return true;
        case 740: return true;
        case 741: return true;
        case 742: return true;
        case 743: return true;
        case 744: return true;
        case 745: return true;
        case 746: return true;
        case 747: return true;
        case 748: return true;
        case 749: return true;
        case 750: return true;
        case 751: return true;
        case 752: return true;
        case 753: return true;
        case 754: return true;
        case 755: return true;
        case 756: return true;
        case 757: return true;
        case 758: return true;
        case 759: return true;
        case 760: return true;
        case 761: return true;
        case 762: return true;
        case 763: return true;
        case 764: return true;
        case 765: return true;
        case 766: return true;
        case 767: return true;
        case 768: return true;
        case 769: return true;
        case 770: return true;
        case 771: return true;
        case 772: return true;
        case 773: return true;
        case 774: return true;
        case 775: return true;
        case 776: return true;
        case 777: return true;
        case 778: return true;
        case 779: return true;
        case 780: return true;
        case 781: return true;
        case 782: return true;
        case 783: return true;
        case 784: return true;
        case 785: return true;
        case 786: return true;
        case 787: return true;
        default: return false;
    }
}

bool set_endpoint_from_float(endpoint_ref_t endpoint_ref, float value) {
    if (endpoint_ref.json_crc != json_crc_) {
        return false;
    }

    Introspectable property{};
    get_property(property, endpoint_ref.endpoint_id);
    const FloatSettableTypeInfo* type_info = dynamic_cast<const FloatSettableTypeInfo*>(property.get_type_info());
    return type_info && type_info->set_float(property, value);
}

}

#pragma GCC pop_options

#endif // __FIBRE_ENDPOINTS_HPP